









// <auto-generated />
using System;

namespace wikibus.common.Vocabularies
{
    /// <summary>Friend of a Friend (FOAF) vocabulary (http://xmlns.com/foaf/0.1/).</summary>
    public static partial class Foaf
    {
        /// <summary>
        /// foaf
        /// </summary>
        public const string Prefix="foaf";

        /// <summary>
        /// http://xmlns.com/foaf/0.1/
        /// </summary>
        public const string BaseUri="http://xmlns.com/foaf/0.1/";

        
        /// <summary>
        /// A foaf:LabelProperty is any RDF property with texual values that serve as labels.
        /// </summary>
        public const string LabelProperty = BaseUri + "LabelProperty";

        
        /// <summary>
        /// A person.
        /// </summary>
        public const string Person = BaseUri + "Person";

        
        /// <summary>
        /// A document.
        /// </summary>
        public const string Document = BaseUri + "Document";

        
        /// <summary>
        /// An organization.
        /// </summary>
        public const string Organization = BaseUri + "Organization";

        
        /// <summary>
        /// A class of Agents.
        /// </summary>
        public const string Group = BaseUri + "Group";

        
        /// <summary>
        /// An agent (eg. person, group, software or physical artifact).
        /// </summary>
        public const string Agent = BaseUri + "Agent";

        
        /// <summary>
        /// A project (a collective endeavour of some kind).
        /// </summary>
        public const string Project = BaseUri + "Project";

        
        /// <summary>
        /// An image.
        /// </summary>
        public const string Image = BaseUri + "Image";

        
        /// <summary>
        /// A personal profile RDF document.
        /// </summary>
        public const string PersonalProfileDocument = BaseUri + "PersonalProfileDocument";

        
        /// <summary>
        /// An online account.
        /// </summary>
        public const string OnlineAccount = BaseUri + "OnlineAccount";

        
        /// <summary>
        /// An online gaming account.
        /// </summary>
        public const string OnlineGamingAccount = BaseUri + "OnlineGamingAccount";

        
        /// <summary>
        /// An online e-commerce account.
        /// </summary>
        public const string OnlineEcommerceAccount = BaseUri + "OnlineEcommerceAccount";

        
        /// <summary>
        /// An online chat account.
        /// </summary>
        public const string OnlineChatAccount = BaseUri + "OnlineChatAccount";

        
        /// <summary>
        /// A  personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that  there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.
        /// </summary>
        public const string mbox = BaseUri + "mbox";

        
        /// <summary>
        /// The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the  first owner of the mailbox.
        /// </summary>
        public const string mbox_sha1sum = BaseUri + "mbox_sha1sum";

        
        /// <summary>
        /// The gender of this Agent (typically but not necessarily 'male' or 'female').
        /// </summary>
        public const string gender = BaseUri + "gender";

        
        /// <summary>
        /// A textual geekcode for this person, see http://www.geekcode.com/geek.html
        /// </summary>
        public const string geekcode = BaseUri + "geekcode";

        
        /// <summary>
        /// A checksum for the DNA of some thing. Joke.
        /// </summary>
        public const string dnaChecksum = BaseUri + "dnaChecksum";

        
        /// <summary>
        /// A sha1sum hash, in hex.
        /// </summary>
        public const string sha1 = BaseUri + "sha1";

        
        /// <summary>
        /// A location that something is based near, for some broadly human notion of near.
        /// </summary>
        public const string based_near = BaseUri + "based_near";

        
        /// <summary>
        /// Title (Mr, Mrs, Ms, Dr. etc)
        /// </summary>
        public const string title = BaseUri + "title";

        
        /// <summary>
        /// A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).
        /// </summary>
        public const string nick = BaseUri + "nick";

        
        /// <summary>
        /// A jabber ID for something.
        /// </summary>
        public const string jabberID = BaseUri + "jabberID";

        
        /// <summary>
        /// An AIM chat ID
        /// </summary>
        public const string aimChatID = BaseUri + "aimChatID";

        
        /// <summary>
        /// A Skype ID
        /// </summary>
        public const string skypeID = BaseUri + "skypeID";

        
        /// <summary>
        /// An ICQ chat ID
        /// </summary>
        public const string icqChatID = BaseUri + "icqChatID";

        
        /// <summary>
        /// A Yahoo chat ID
        /// </summary>
        public const string yahooChatID = BaseUri + "yahooChatID";

        
        /// <summary>
        /// An MSN chat ID
        /// </summary>
        public const string msnChatID = BaseUri + "msnChatID";

        
        /// <summary>
        /// A name for some thing.
        /// </summary>
        public const string name = BaseUri + "name";

        
        /// <summary>
        /// The first name of a person.
        /// </summary>
        public const string firstName = BaseUri + "firstName";

        
        /// <summary>
        /// The last name of a person.
        /// </summary>
        public const string lastName = BaseUri + "lastName";

        
        /// <summary>
        /// The given name of some person.
        /// </summary>
        public const string givenName = BaseUri + "givenName";

        
        /// <summary>
        /// The given name of some person.
        /// </summary>
        public const string givenname = BaseUri + "givenname";

        
        /// <summary>
        /// The surname of some person.
        /// </summary>
        public const string surname = BaseUri + "surname";

        
        /// <summary>
        /// The family name of some person.
        /// </summary>
        public const string family_name = BaseUri + "family_name";

        
        /// <summary>
        /// The family name of some person.
        /// </summary>
        public const string familyName = BaseUri + "familyName";

        
        /// <summary>
        /// A phone,  specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).
        /// </summary>
        public const string phone = BaseUri + "phone";

        
        /// <summary>
        /// A homepage for some thing.
        /// </summary>
        public const string homepage = BaseUri + "homepage";

        
        /// <summary>
        /// A weblog of some thing (whether person, group, company etc.).
        /// </summary>
        public const string weblog = BaseUri + "weblog";

        
        /// <summary>
        /// An OpenID for an Agent.
        /// </summary>
        public const string openid = BaseUri + "openid";

        
        /// <summary>
        /// A tipjar document for this agent, describing means for payment and reward.
        /// </summary>
        public const string tipjar = BaseUri + "tipjar";

        
        /// <summary>
        /// A .plan comment, in the tradition of finger and '.plan' files.
        /// </summary>
        public const string plan = BaseUri + "plan";

        
        /// <summary>
        /// Something that was made by this agent.
        /// </summary>
        public const string made = BaseUri + "made";

        
        /// <summary>
        /// An agent that made this thing.
        /// </summary>
        public const string maker = BaseUri + "maker";

        
        /// <summary>
        /// An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).
        /// </summary>
        public const string img = BaseUri + "img";

        
        /// <summary>
        /// A depiction of some thing.
        /// </summary>
        public const string depiction = BaseUri + "depiction";

        
        /// <summary>
        /// A thing depicted in this representation.
        /// </summary>
        public const string depicts = BaseUri + "depicts";

        
        /// <summary>
        /// A derived thumbnail image.
        /// </summary>
        public const string thumbnail = BaseUri + "thumbnail";

        
        /// <summary>
        /// A Myers Briggs (MBTI) personality classification.
        /// </summary>
        public const string myersBriggs = BaseUri + "myersBriggs";

        
        /// <summary>
        /// A workplace homepage of some person; the homepage of an organization they work for.
        /// </summary>
        public const string workplaceHomepage = BaseUri + "workplaceHomepage";

        
        /// <summary>
        /// A work info homepage of some person; a page about their work for some organization.
        /// </summary>
        public const string workInfoHomepage = BaseUri + "workInfoHomepage";

        
        /// <summary>
        /// A homepage of a school attended by the person.
        /// </summary>
        public const string schoolHomepage = BaseUri + "schoolHomepage";

        
        /// <summary>
        /// A person known by this person (indicating some level of reciprocated interaction between the parties).
        /// </summary>
        public const string knows = BaseUri + "knows";

        
        /// <summary>
        /// A page about a topic of interest to this person.
        /// </summary>
        public const string interest = BaseUri + "interest";

        
        /// <summary>
        /// A thing of interest to this person.
        /// </summary>
        public const string topic_interest = BaseUri + "topic_interest";

        
        /// <summary>
        /// A link to the publications of this person.
        /// </summary>
        public const string publications = BaseUri + "publications";

        
        /// <summary>
        /// A current project this person works on.
        /// </summary>
        public const string currentProject = BaseUri + "currentProject";

        
        /// <summary>
        /// A project this person has previously worked on.
        /// </summary>
        public const string pastProject = BaseUri + "pastProject";

        
        /// <summary>
        /// An organization funding a project or person.
        /// </summary>
        public const string fundedBy = BaseUri + "fundedBy";

        
        /// <summary>
        /// A logo representing some thing.
        /// </summary>
        public const string logo = BaseUri + "logo";

        
        /// <summary>
        /// A topic of some page or document.
        /// </summary>
        public const string topic = BaseUri + "topic";

        
        /// <summary>
        /// The primary topic of some page or document.
        /// </summary>
        public const string primaryTopic = BaseUri + "primaryTopic";

        
        /// <summary>
        /// The underlying or 'focal' entity associated with some SKOS-described concept.
        /// </summary>
        public const string focus = BaseUri + "focus";

        
        /// <summary>
        /// A document that this thing is the primary topic of.
        /// </summary>
        public const string isPrimaryTopicOf = BaseUri + "isPrimaryTopicOf";

        
        /// <summary>
        /// A page or document about this thing.
        /// </summary>
        public const string page = BaseUri + "page";

        
        /// <summary>
        /// A theme.
        /// </summary>
        public const string theme = BaseUri + "theme";

        
        /// <summary>
        /// Indicates an account held by this agent.
        /// </summary>
        public const string account = BaseUri + "account";

        
        /// <summary>
        /// Indicates an account held by this agent.
        /// </summary>
        public const string holdsAccount = BaseUri + "holdsAccount";

        
        /// <summary>
        /// Indicates a homepage of the service provide for this online account.
        /// </summary>
        public const string accountServiceHomepage = BaseUri + "accountServiceHomepage";

        
        /// <summary>
        /// Indicates the name (identifier) associated with this online account.
        /// </summary>
        public const string accountName = BaseUri + "accountName";

        
        /// <summary>
        /// Indicates a member of a Group
        /// </summary>
        public const string member = BaseUri + "member";

        
        /// <summary>
        /// Indicates the class of individuals that are a member of a Group
        /// </summary>
        public const string membershipClass = BaseUri + "membershipClass";

        
        /// <summary>
        /// The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.
        /// </summary>
        public const string birthday = BaseUri + "birthday";

        
        /// <summary>
        /// The age in years of some agent.
        /// </summary>
        public const string age = BaseUri + "age";

        
        /// <summary>
        /// A string expressing what the user is happy for the general public (normally) to know about their current activity.
        /// </summary>
        public const string status = BaseUri + "status";

    }
}