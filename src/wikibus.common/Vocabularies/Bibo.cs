// <auto-generated />
using System;

namespace wikibus.common.Vocabularies
{
    /// <summary>The Bibliographic Ontology (http://purl.org/ontology/bibo/).</summary>
    public static partial class Bibo
    {
        public const string Prefix="bibo";

        public const string BaseUri="http://purl.org/ontology/bibo/";
        
        /// <summary>
        /// A scholarly academic article, typically published in a journal.
        /// </summary>
        public static readonly Uri AcademicArticle=new Uri(BaseUri+"AcademicArticle");
        
        /// <summary>
        /// A written composition in prose, usually nonfiction, on a specific topic, forming an independent part of a book or other publication, as a newspaper or magazine.
        /// </summary>
        public static readonly Uri Article=new Uri(BaseUri+"Article");
        
        /// <summary>
        /// An audio document; aka record.
        /// </summary>
        public static readonly Uri AudioDocument=new Uri(BaseUri+"AudioDocument");
        
        /// <summary>
        /// An audio-visual document; film, video, and so forth.
        /// </summary>
        public static readonly Uri AudioVisualDocument=new Uri(BaseUri+"AudioVisualDocument");
        
        /// <summary>
        /// Draft legislation presented for discussion to a legal body.
        /// </summary>
        public static readonly Uri Bill=new Uri(BaseUri+"Bill");
        
        /// <summary>
        /// A written or printed work of fiction or nonfiction, usually on sheets of paper fastened or bound together within covers.
        /// </summary>
        public static readonly Uri Book=new Uri(BaseUri+"Book");
        
        /// <summary>
        /// A section of a book.
        /// </summary>
        public static readonly Uri BookSection=new Uri(BaseUri+"BookSection");
        
        /// <summary>
        /// A written argument submitted to a court.
        /// </summary>
        public static readonly Uri Brief=new Uri(BaseUri+"Brief");
        
        /// <summary>
        /// A chapter of a book.
        /// </summary>
        public static readonly Uri Chapter=new Uri(BaseUri+"Chapter");
        
        /// <summary>
        /// A collection of statutes.
        /// </summary>
        public static readonly Uri Code=new Uri(BaseUri+"Code");
        
        /// <summary>
        /// A document that simultaneously contains other documents.
        /// </summary>
        public static readonly Uri CollectedDocument=new Uri(BaseUri+"CollectedDocument");
        
        /// <summary>
        /// A collection of Documents or Collections
        /// </summary>
        public static readonly Uri Collection=new Uri(BaseUri+"Collection");
        
        /// <summary>
        /// A meeting for consultation or discussion.
        /// </summary>
        public static readonly Uri Conference=new Uri(BaseUri+"Conference");
        
        /// <summary>
        /// A collection of legal cases.
        /// </summary>
        public static readonly Uri CourtReporter=new Uri(BaseUri+"CourtReporter");
        
        /// <summary>
        /// A document (noun) is a bounded physical representation of body of information designed with the capacity (and usually intent) to communicate. A document may manifest symbolic, diagrammatic or sensory-representational information.
        /// </summary>
        public static readonly Uri Document=new Uri(BaseUri+"Document");
        
        /// <summary>
        /// a distinct part of a larger document or collected document.
        /// </summary>
        public static readonly Uri DocumentPart=new Uri(BaseUri+"DocumentPart");
        
        /// <summary>
        /// The status of the publication of a document.
        /// </summary>
        public static readonly Uri DocumentStatus=new Uri(BaseUri+"DocumentStatus");
        
        /// <summary>
        /// An edited book.
        /// </summary>
        public static readonly Uri EditedBook=new Uri(BaseUri+"EditedBook");
        
        /// <summary>
        /// A written communication addressed to a person or organization and transmitted electronically.
        /// </summary>
        public static readonly Uri Email=new Uri(BaseUri+"Email");
        
        /// <summary>
        /// Event
        /// </summary>
        public static readonly Uri Event=new Uri(BaseUri+"Event");
        
        /// <summary>
        /// A passage selected from a larger work.
        /// </summary>
        public static readonly Uri Excerpt=new Uri(BaseUri+"Excerpt");
        
        /// <summary>
        /// aka movie.
        /// </summary>
        public static readonly Uri Film=new Uri(BaseUri+"Film");
        
        /// <summary>
        /// An instance or a session in which testimony and arguments are presented, esp. before an official, as a judge in a lawsuit.
        /// </summary>
        public static readonly Uri Hearing=new Uri(BaseUri+"Hearing");
        
        /// <summary>
        /// A document that presents visual or diagrammatic information.
        /// </summary>
        public static readonly Uri Image=new Uri(BaseUri+"Image");
        
        /// <summary>
        /// A formalized discussion between two or more people.
        /// </summary>
        public static readonly Uri Interview=new Uri(BaseUri+"Interview");
        
        /// <summary>
        /// something that is printed or published and distributed, esp. a given number of a periodical
        /// </summary>
        public static readonly Uri Issue=new Uri(BaseUri+"Issue");
        
        /// <summary>
        /// A periodical of scholarly journal Articles.
        /// </summary>
        public static readonly Uri Journal=new Uri(BaseUri+"Journal");
        
        /// <summary>
        /// A document accompanying a legal case.
        /// </summary>
        public static readonly Uri LegalCaseDocument=new Uri(BaseUri+"LegalCaseDocument");
        
        /// <summary>
        /// A document containing an authoritative determination (as a decree or judgment) made after consideration of facts or law.
        /// </summary>
        public static readonly Uri LegalDecision=new Uri(BaseUri+"LegalDecision");
        
        /// <summary>
        /// A legal document; for example, a court decision, a brief, and so forth.
        /// </summary>
        public static readonly Uri LegalDocument=new Uri(BaseUri+"LegalDocument");
        
        /// <summary>
        /// A legal document proposing or enacting a law or a group of laws.
        /// </summary>
        public static readonly Uri Legislation=new Uri(BaseUri+"Legislation");
        
        /// <summary>
        /// A written or printed communication addressed to a person or organization and usually transmitted by mail.
        /// </summary>
        public static readonly Uri Letter=new Uri(BaseUri+"Letter");
        
        /// <summary>
        /// A periodical of magazine Articles. A magazine is a publication that is issued periodically, usually bound in a paper cover, and typically contains essays, stories, poems, etc., by many writers, and often photographs and drawings, frequently specializing in a particular subject or area, as hobbies, news, or sports.
        /// </summary>
        public static readonly Uri Magazine=new Uri(BaseUri+"Magazine");
        
        /// <summary>
        /// A small reference book, especially one giving instructions.
        /// </summary>
        public static readonly Uri Manual=new Uri(BaseUri+"Manual");
        
        /// <summary>
        /// An unpublished Document, which may also be submitted to a publisher for publication.
        /// </summary>
        public static readonly Uri Manuscript=new Uri(BaseUri+"Manuscript");
        
        /// <summary>
        /// A graphical depiction of geographic features.
        /// </summary>
        public static readonly Uri Map=new Uri(BaseUri+"Map");
        
        /// <summary>
        /// A loose, thematic, collection of Documents, often Books.
        /// </summary>
        public static readonly Uri MultiVolumeBook=new Uri(BaseUri+"MultiVolumeBook");
        
        /// <summary>
        /// A periodical of documents, usually issued daily or weekly, containing current news, editorials, feature articles, and usually advertising.
        /// </summary>
        public static readonly Uri Newspaper=new Uri(BaseUri+"Newspaper");
        
        /// <summary>
        /// Notes or annotations about a resource.
        /// </summary>
        public static readonly Uri Note=new Uri(BaseUri+"Note");
        
        /// <summary>
        /// A document describing the exclusive right granted by a government to an inventor to manufacture, use, or sell an invention for a certain number of years.
        /// </summary>
        public static readonly Uri Patent=new Uri(BaseUri+"Patent");
        
        /// <summary>
        /// A public performance.
        /// </summary>
        public static readonly Uri Performance=new Uri(BaseUri+"Performance");
        
        /// <summary>
        /// A group of related documents issued at regular intervals.
        /// </summary>
        public static readonly Uri Periodical=new Uri(BaseUri+"Periodical");
        
        /// <summary>
        /// A communication between an agent and one or more specific recipients.
        /// </summary>
        public static readonly Uri PersonalCommunication=new Uri(BaseUri+"PersonalCommunication");
        
        /// <summary>
        /// A personal communication manifested in some document.
        /// </summary>
        public static readonly Uri PersonalCommunicationDocument=new Uri(BaseUri+"PersonalCommunicationDocument");
        
        /// <summary>
        /// A compilation of documents published from an event, such as a conference.
        /// </summary>
        public static readonly Uri Proceedings=new Uri(BaseUri+"Proceedings");
        
        /// <summary>
        /// An excerpted collection of words.
        /// </summary>
        public static readonly Uri Quote=new Uri(BaseUri+"Quote");
        
        /// <summary>
        /// A document that presents authoritative reference information, such as a dictionary or encylopedia .
        /// </summary>
        public static readonly Uri ReferenceSource=new Uri(BaseUri+"ReferenceSource");
        
        /// <summary>
        /// A document describing an account or statement describing in detail an event, situation, or the like, usually as the result of observation, inquiry, etc..
        /// </summary>
        public static readonly Uri Report=new Uri(BaseUri+"Report");
        
        /// <summary>
        /// A loose, thematic, collection of Documents, often Books.
        /// </summary>
        public static readonly Uri Series=new Uri(BaseUri+"Series");
        
        /// <summary>
        /// A slide in a slideshow
        /// </summary>
        public static readonly Uri Slide=new Uri(BaseUri+"Slide");
        
        /// <summary>
        /// A presentation of a series of slides, usually presented in front of an audience with written text and images.
        /// </summary>
        public static readonly Uri Slideshow=new Uri(BaseUri+"Slideshow");
        
        /// <summary>
        /// A document describing a standard
        /// </summary>
        public static readonly Uri Standard=new Uri(BaseUri+"Standard");
        
        /// <summary>
        /// A bill enacted into law.
        /// </summary>
        public static readonly Uri Statute=new Uri(BaseUri+"Statute");
        
        /// <summary>
        /// A document created to summarize research findings associated with the completion of an academic degree.
        /// </summary>
        public static readonly Uri Thesis=new Uri(BaseUri+"Thesis");
        
        /// <summary>
        /// The academic degree of a Thesis
        /// </summary>
        public static readonly Uri ThesisDegree=new Uri(BaseUri+"ThesisDegree");
        
        /// <summary>
        /// A web page is an online document available (at least initially) on the world wide web. A web page is written first and foremost to appear on the web, as distinct from other online resources such as books, manuscripts or audio documents which use the web primarily as a distribution mechanism alongside other more traditional methods such as print.
        /// </summary>
        public static readonly Uri Webpage=new Uri(BaseUri+"Webpage");
        
        /// <summary>
        /// A group of Webpages accessible on the Web.
        /// </summary>
        public static readonly Uri Website=new Uri(BaseUri+"Website");
        
        /// <summary>
        /// A seminar, discussion group, or the like, that emphasizes zxchange of ideas and the demonstration and application of techniques, skills, etc.
        /// </summary>
        public static readonly Uri Workshop=new Uri(BaseUri+"Workshop");
        
        /// <summary>
        /// A summary of the resource.
        /// </summary>
        public static readonly Uri @abstract=new Uri(BaseUri+"abstract");
        
        /// <summary>
        /// The date on which a legal case is argued before a court. Date is of format xsd:date
        /// </summary>
        public static readonly Uri argued=new Uri(BaseUri+"argued");
        
        /// <summary>
        /// asin
        /// </summary>
        public static readonly Uri asin=new Uri(BaseUri+"asin");
        
        /// <summary>
        /// An chapter number
        /// </summary>
        public static readonly Uri chapter=new Uri(BaseUri+"chapter");
        
        /// <summary>
        /// coden
        /// </summary>
        public static readonly Uri coden=new Uri(BaseUri+"coden");
        
        /// <summary>
        /// This property is for a plain-text rendering of the content of a Document. While the plain-text content of an entire document could be described by this property.
        /// </summary>
        public static readonly Uri content=new Uri(BaseUri+"content");
        
        /// <summary>
        /// doi
        /// </summary>
        public static readonly Uri doi=new Uri(BaseUri+"doi");
        
        /// <summary>
        /// eanucc13
        /// </summary>
        public static readonly Uri eanucc13=new Uri(BaseUri+"eanucc13");
        
        /// <summary>
        /// The name defining a special edition of a document. Normally its a literal value composed of a version number and words.
        /// </summary>
        public static readonly Uri edition=new Uri(BaseUri+"edition");
        
        /// <summary>
        /// eissn
        /// </summary>
        public static readonly Uri eissn=new Uri(BaseUri+"eissn");
        
        /// <summary>
        /// gtin14
        /// </summary>
        public static readonly Uri gtin14=new Uri(BaseUri+"gtin14");
        
        /// <summary>
        /// handle
        /// </summary>
        public static readonly Uri handle=new Uri(BaseUri+"handle");
        
        /// <summary>
        /// identifier
        /// </summary>
        public static readonly Uri identifier=new Uri(BaseUri+"identifier");
        
        /// <summary>
        /// isbn
        /// </summary>
        public static readonly Uri isbn=new Uri(BaseUri+"isbn");
        
        /// <summary>
        /// isbn10
        /// </summary>
        public static readonly Uri isbn10=new Uri(BaseUri+"isbn10");
        
        /// <summary>
        /// isbn13
        /// </summary>
        public static readonly Uri isbn13=new Uri(BaseUri+"isbn13");
        
        /// <summary>
        /// issn
        /// </summary>
        public static readonly Uri issn=new Uri(BaseUri+"issn");
        
        /// <summary>
        /// An issue number
        /// </summary>
        public static readonly Uri issue=new Uri(BaseUri+"issue");
        
        /// <summary>
        /// lccn
        /// </summary>
        public static readonly Uri lccn=new Uri(BaseUri+"lccn");
        
        /// <summary>
        /// A description (often numeric) that locates an item within a containing document or collection.
        /// </summary>
        public static readonly Uri locator=new Uri(BaseUri+"locator");
        
        /// <summary>
        /// The number of pages contained in a document
        /// </summary>
        public static readonly Uri numPages=new Uri(BaseUri+"numPages");
        
        /// <summary>
        /// The number of volumes contained in a collection of documents (usually a series, periodical, etc.).
        /// </summary>
        public static readonly Uri numVolumes=new Uri(BaseUri+"numVolumes");
        
        /// <summary>
        /// A generic item or document number. Not to be confused with issue number.
        /// </summary>
        public static readonly Uri number=new Uri(BaseUri+"number");
        
        /// <summary>
        /// oclcnum
        /// </summary>
        public static readonly Uri oclcnum=new Uri(BaseUri+"oclcnum");
        
        /// <summary>
        /// Ending page number within a continuous page range.
        /// </summary>
        public static readonly Uri pageEnd=new Uri(BaseUri+"pageEnd");
        
        /// <summary>
        /// Starting page number within a continuous page range.
        /// </summary>
        public static readonly Uri pageStart=new Uri(BaseUri+"pageStart");
        
        /// <summary>
        /// A string of non-contiguous page spans that locate a Document within a Collection. Example: 23-25, 34, 54-56. For continuous page ranges, use the pageStart and pageEnd properties.
        /// </summary>
        public static readonly Uri pages=new Uri(BaseUri+"pages");
        
        /// <summary>
        /// pmid
        /// </summary>
        public static readonly Uri pmid=new Uri(BaseUri+"pmid");
        
        /// <summary>
        /// The prefix of a name
        /// </summary>
        public static readonly Uri prefixName=new Uri(BaseUri+"prefixName");
        
        /// <summary>
        /// A section number
        /// </summary>
        public static readonly Uri section=new Uri(BaseUri+"section");
        
        /// <summary>
        /// shortDescription
        /// </summary>
        public static readonly Uri shortDescription=new Uri(BaseUri+"shortDescription");
        
        /// <summary>
        /// The abbreviation of a title.
        /// </summary>
        public static readonly Uri shortTitle=new Uri(BaseUri+"shortTitle");
        
        /// <summary>
        /// sici
        /// </summary>
        public static readonly Uri sici=new Uri(BaseUri+"sici");
        
        /// <summary>
        /// The suffix of a name
        /// </summary>
        public static readonly Uri suffixName=new Uri(BaseUri+"suffixName");
        
        /// <summary>
        /// upc
        /// </summary>
        public static readonly Uri upc=new Uri(BaseUri+"upc");
        
        /// <summary>
        /// Universal Resource Identifier of a document
        /// </summary>
        public static readonly Uri uri=new Uri(BaseUri+"uri");
        
        /// <summary>
        /// A volume number
        /// </summary>
        public static readonly Uri volume=new Uri(BaseUri+"volume");
        
        /// <summary>
        /// A legal decision that affirms a ruling.
        /// </summary>
        public static readonly Uri affirmedBy=new Uri(BaseUri+"affirmedBy");
        
        /// <summary>
        /// Critical or explanatory note for a Document.
        /// </summary>
        public static readonly Uri annotates=new Uri(BaseUri+"annotates");
        
        /// <summary>
        /// An ordered list of authors. Normally, this list is seen as a priority list that order authors by importance.
        /// </summary>
        public static readonly Uri authorList=new Uri(BaseUri+"authorList");
        
        /// <summary>
        /// Relates a document to another document that cites the first document.
        /// </summary>
        public static readonly Uri citedBy=new Uri(BaseUri+"citedBy");
        
        /// <summary>
        /// Relates a document to another document that is cited by the first document as reference, comment, review, quotation or for another purpose.
        /// </summary>
        public static readonly Uri cites=new Uri(BaseUri+"cites");
        
        /// <summary>
        /// An ordered list of contributors. Normally, this list is seen as a priority list that order contributors by importance.
        /// </summary>
        public static readonly Uri contributorList=new Uri(BaseUri+"contributorList");
        
        /// <summary>
        /// A court associated with a legal document; for example, that which issues a decision.
        /// </summary>
        public static readonly Uri court=new Uri(BaseUri+"court");
        
        /// <summary>
        /// The thesis degree.
        /// </summary>
        public static readonly Uri degree=new Uri(BaseUri+"degree");
        
        /// <summary>
        /// A Film director.
        /// </summary>
        public static readonly Uri director=new Uri(BaseUri+"director");
        
        /// <summary>
        /// Distributor of a document or a collection of documents.
        /// </summary>
        public static readonly Uri distributor=new Uri(BaseUri+"distributor");
        
        /// <summary>
        /// A person having managerial and sometimes policy-making responsibility for the editorial part of a publishing firm or of a newspaper, magazine, or other publication.
        /// </summary>
        public static readonly Uri editor=new Uri(BaseUri+"editor");
        
        /// <summary>
        /// An ordered list of editors. Normally, this list is seen as a priority list that order editors by importance.
        /// </summary>
        public static readonly Uri editorList=new Uri(BaseUri+"editorList");
        
        /// <summary>
        /// An agent that is interviewed by another agent.
        /// </summary>
        public static readonly Uri interviewee=new Uri(BaseUri+"interviewee");
        
        /// <summary>
        /// An agent that interview another agent.
        /// </summary>
        public static readonly Uri interviewer=new Uri(BaseUri+"interviewer");
        
        /// <summary>
        /// An entity responsible for issuing often informally published documents such as press releases, reports, etc.
        /// </summary>
        public static readonly Uri issuer=new Uri(BaseUri+"issuer");
        
        /// <summary>
        /// The organizer of an event; includes conference organizers, but also government agencies or other bodies that are responsible for conducting hearings.
        /// </summary>
        public static readonly Uri organizer=new Uri(BaseUri+"organizer");
        
        /// <summary>
        /// Owner of a document or a collection of documents.
        /// </summary>
        public static readonly Uri owner=new Uri(BaseUri+"owner");
        
        /// <summary>
        /// performer
        /// </summary>
        public static readonly Uri performer=new Uri(BaseUri+"performer");
        
        /// <summary>
        /// Relates a document to an event; for example, a paper to a conference.
        /// </summary>
        public static readonly Uri presentedAt=new Uri(BaseUri+"presentedAt");
        
        /// <summary>
        /// Relates an event to associated documents; for example, conference to a paper.
        /// </summary>
        public static readonly Uri presents=new Uri(BaseUri+"presents");
        
        /// <summary>
        /// Producer of a document or a collection of documents.
        /// </summary>
        public static readonly Uri producer=new Uri(BaseUri+"producer");
        
        /// <summary>
        /// An agent that receives a communication document.
        /// </summary>
        public static readonly Uri recipient=new Uri(BaseUri+"recipient");
        
        /// <summary>
        /// The resource in which another resource is reproduced.
        /// </summary>
        public static readonly Uri reproducedIn=new Uri(BaseUri+"reproducedIn");
        
        /// <summary>
        /// A legal decision that reverses a ruling.
        /// </summary>
        public static readonly Uri reversedBy=new Uri(BaseUri+"reversedBy");
        
        /// <summary>
        /// Relates a review document to a reviewed thing (resource, item, etc.).
        /// </summary>
        public static readonly Uri reviewOf=new Uri(BaseUri+"reviewOf");
        
        /// <summary>
        /// The publication status of (typically academic) content.
        /// </summary>
        public static readonly Uri status=new Uri(BaseUri+"status");
        
        /// <summary>
        /// A legal decision on appeal that takes action on a case (affirming it, reversing it, etc.).
        /// </summary>
        public static readonly Uri subsequentLegalDecision=new Uri(BaseUri+"subsequentLegalDecision");
        
        /// <summary>
        /// Relates a document to some transcribed original.
        /// </summary>
        public static readonly Uri transcriptOf=new Uri(BaseUri+"transcriptOf");
        
        /// <summary>
        /// Relates a translated document to the original document.
        /// </summary>
        public static readonly Uri translationOf=new Uri(BaseUri+"translationOf");
        
        /// <summary>
        /// A person who translates written document from one language to another.
        /// </summary>
        public static readonly Uri translator=new Uri(BaseUri+"translator");
    }
}