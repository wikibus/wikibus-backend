// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace wikibus.tests.SourcesRepository
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Retrieve sources from repository")]
    public partial class RetrieveSourcesFromRepositoryFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RetrieveSources.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Retrieve sources from repository", "Verify that models are correctly deserialized from RDF", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get simple brochure")]
        public virtual void GetSimpleBrochure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get simple brochure", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 5
   testRunner.Given("RDF data:", "@base <http://wikibus.org/> .\r\n@prefix dcterms: <http://purl.org/dc/terms/>.\r\n\r\n{" +
                    "\r\n   <brochure/VanHool+T8> a <ontology#Brochure> ;\r\n      dcterms:title \"VanHool" +
                    " T8 - New Look\" .\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
   testRunner.When("brochure <http://wikibus.org/brochure/VanHool+T8> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
   testRunner.Then("\'Title\' should be string equal to \'VanHool T8 - New Look\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get brochure with Polish diacritics")]
        public virtual void GetBrochureWithPolishDiacritics()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get brochure with Polish diacritics", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 19
   testRunner.Given("RDF data:", "@base <http://wikibus.org/> .\r\n@prefix dcterms: <http://purl.org/dc/terms/>.\r\n\r\n{" +
                    "\r\n   <brochure/12345> a <ontology#Brochure> ;\r\n      dcterms:title \"Jelcz M11 - " +
                    "nowość\" .\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
   testRunner.When("brochure <http://wikibus.org/brochure/12345> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
   testRunner.Then("\'Title\' should be string equal to \'Jelcz M11 - nowość\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get complete brochure")]
        public virtual void GetCompleteBrochure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get complete brochure", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 33
    testRunner.Given("RDF data:", @"@base <http://wikibus.org/>.
@prefix wbo: <http://wikibus.org/ontology#>.
@prefix bibo: <http://purl.org/ontology/bibo/>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix opus: <http://lsdis.cs.uga.edu/projects/semdis/opus#>.
@prefix langIso: <http://www.lexvo.org/page/iso639-1/>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix sch: <http://schema.org/>.

{
    <brochure/6> 
        a wbo:Brochure ;
        bibo:pages 2 ;
        dcterms:title ""Fakty: Autobus turystyczny Volvo B9r/Sunsundegui Elegance"" ;
        opus:year ""2006""^^xsd:gYear ;
        opus:month ""9""^^xsd:gMonth ;
        dcterms:date ""2006-9-21""^^xsd:date ;
        dcterms:language langIso:pl ;
        dcterms:identifier ""BED 81419 2006-09-21 POL Version 2"" ;
        rdfs:comment ""Some description about brochure"" ;
        sch:image [ sch:contentUrl ""http://wikibus.org/brochure/6/image""^^sch:URL ] .
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
    testRunner.When("brochure <http://wikibus.org/brochure/6> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
    testRunner.Then("\'Title\' should be string equal to \'Fakty: Autobus turystyczny Volvo B9r/Sunsundeg" +
                    "ui Elegance\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 61
     testRunner.And("\'Pages\' should be integer equal to \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
     testRunner.And("\'Date\' should be DateTime equal to \'2006-09-21\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
     testRunner.And("\'Month\' should be integer equal to \'9\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
     testRunner.And("\'Code\' should be string equal to \'BED 81419 2006-09-21 POL Version 2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
     testRunner.And("Languages should contain \'pl\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
     testRunner.And("\'Description\' should be string equal to \'Some description about brochure\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
     testRunner.And("\'Image\' should be not null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
     testRunner.And("\'Image\' should have string property \'ContentUrl\' equal to \'http://wikibus.org/bro" +
                    "chure/6/image\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get brochure without data")]
        public virtual void GetBrochureWithoutData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get brochure without data", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 71
    testRunner.Given("RDF data:", @"@base <http://wikibus.org/>.
@prefix wbo: <http://wikibus.org/ontology#>.
@prefix bibo: <http://purl.org/ontology/bibo/>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix opus: <http://lsdis.cs.uga.edu/projects/semdis/opus#>.
@prefix langIso: <http://www.lexvo.org/page/iso639-1/>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.

{
    <brochure/6> 
        a wbo:Brochure ;
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 87
    testRunner.When("brochure <http://wikibus.org/brochure/6> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
    testRunner.Then("\'Title\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
     testRunner.And("\'Pages\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
     testRunner.And("\'Date\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
     testRunner.And("\'Month\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
     testRunner.And("\'Code\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
     testRunner.And("\'Languages\' should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
     testRunner.And("\'Description\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get complete book")]
        public virtual void GetCompleteBook()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get complete book", ((string[])(null)));
#line 96
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 97
    testRunner.Given("RDF data:", @"@base <http://wikibus.org/>.
@prefix wbo: <http://wikibus.org/ontology#>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix sch: <http://schema.org/>.

{
    <book/6> 
        a wbo:Book ;
        dcterms:title ""Strassenbahnen in Schlesien"" ;
        sch:isbn ""3879434247"" .
    <book/6> sch:image [ sch:contentUrl ""http://wikibus.org/book/6/image""^^sch:URL ] .
    <book/6> sch:author [ sch:name ""Siegfried Bufe"" ].
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 113
    testRunner.When("book <http://wikibus.org/book/6> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 114
    testRunner.Then("\'Title\' should be string equal to \'Strassenbahnen in Schlesien\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 115
     testRunner.And("\'Author\' should be not null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
     testRunner.And("\'Author\' should have string property \'Name\' equal to \'Siegfried Bufe\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
     testRunner.And("\'ISBN\' should be string equal to \'3879434247\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
     testRunner.And("\'Image\' should be not null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
     testRunner.And("\'Image\' should have string property \'ContentUrl\' equal to \'http://wikibus.org/boo" +
                    "k/6/image\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get book without author")]
        public virtual void GetBookWithoutAuthor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get book without author", ((string[])(null)));
#line 121
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 122
    testRunner.Given("RDF data:", @"@base <http://wikibus.org/>.
@prefix wbo: <http://wikibus.org/ontology#>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix sch: <http://schema.org/>.

{
    <book/6> 
        a wbo:Book ;
        dcterms:title ""Strassenbahnen in Schlesien"" ;
        sch:isbn ""3879434247"" .
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 136
    testRunner.When("book <http://wikibus.org/book/6> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
     testRunner.Then("\'Author\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get first page of books")]
        public virtual void GetFirstPageOfBooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get first page of books", ((string[])(null)));
#line 139
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 140
    testRunner.Given("RDF data:", @"@base <http://wikibus.org/>.
@prefix wbo: <http://wikibus.org/ontology#>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix sch: <http://schema.org/>.

{
    <book/1> a wbo:Book .
    <book/2> a wbo:Book .
    <book/3> a wbo:Book .
    <book/4> a wbo:Book .
    <book/5> a wbo:Book .
    <book/6> a wbo:Book .
    <book/7> a wbo:Book .
    <book/8> a wbo:Book .
    <book/9> a wbo:Book .
    <book/10> a wbo:Book .
    <book/11> a wbo:Book .
    <book/12> a wbo:Book .
    <book/13> a wbo:Book .
    <book/14> a wbo:Book .
    <book/15> a wbo:Book .
    <book/16> a wbo:Book .
    <book/17> a wbo:Book .
    <book/18> a wbo:Book .
    <book/19> a wbo:Book .
    <book/20> a wbo:Book .
    <book/21> a wbo:Book .
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 171
     testRunner.When("page 1 of books is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 172
     testRunner.Then("\'TotalItems\' should be 21", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 173
      testRunner.And("\'ItemsPerPage\' should be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
      testRunner.And("\'NextPage\' should be Uri \'http://wikibus.org/books?page=2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
      testRunner.And("\'LastPage\' should be Uri \'http://wikibus.org/books?page=3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get last page of books")]
        public virtual void GetLastPageOfBooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get last page of books", ((string[])(null)));
#line 177
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 178
    testRunner.Given("RDF data:", @"@base <http://wikibus.org/>.
@prefix wbo: <http://wikibus.org/ontology#>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix sch: <http://schema.org/>.

{
    <book/1> a wbo:Book .
    <book/2> a wbo:Book .
    <book/3> a wbo:Book .
    <book/4> a wbo:Book .
    <book/5> a wbo:Book .
    <book/6> a wbo:Book .
    <book/7> a wbo:Book .
    <book/8> a wbo:Book .
    <book/9> a wbo:Book .
    <book/10> a wbo:Book .
    <book/11> a wbo:Book .
    <book/12> a wbo:Book .
    <book/13> a wbo:Book .
    <book/14> a wbo:Book .
    <book/15> a wbo:Book .
    <book/16> a wbo:Book .
    <book/17> a wbo:Book .
    <book/18> a wbo:Book .
    <book/19> a wbo:Book .
    <book/20> a wbo:Book .
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 208
     testRunner.When("page 2 of books is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 209
     testRunner.Then("\'TotalItems\' should be 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 210
      testRunner.And("\'ItemsPerPage\' should be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
      testRunner.And("\'NextPage\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
      testRunner.And("\'PreviousPage\' should be Uri \'http://wikibus.org/books?page=2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
      testRunner.And("\'LastPage\' should be Uri \'http://wikibus.org/books?page=2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get invalid page of books")]
        public virtual void GetInvalidPageOfBooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get invalid page of books", ((string[])(null)));
#line 215
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 216
    testRunner.Given("RDF data:", @"@base <http://wikibus.org/>.
@prefix wbo: <http://wikibus.org/ontology#>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix sch: <http://schema.org/>.

{
    <book/1> a wbo:Book .
    <book/2> a wbo:Book .
    <book/3> a wbo:Book .
    <book/4> a wbo:Book .
    <book/5> a wbo:Book .
    <book/6> a wbo:Book .
    <book/7> a wbo:Book .
    <book/8> a wbo:Book .
    <book/9> a wbo:Book .
    <book/10> a wbo:Book .
    <book/11> a wbo:Book .
    <book/12> a wbo:Book .
    <book/13> a wbo:Book .
    <book/14> a wbo:Book .
    <book/15> a wbo:Book .
    <book/16> a wbo:Book .
    <book/17> a wbo:Book .
    <book/18> a wbo:Book .
    <book/19> a wbo:Book .
    <book/20> a wbo:Book .
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 246
     testRunner.When("page 20 of books is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 247
     testRunner.Then("\'TotalItems\' should be 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 248
      testRunner.And("\'ItemsPerPage\' should be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 249
      testRunner.And("\'NextPage\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 250
      testRunner.And("\'PreviousPage\' should be Uri \'http://wikibus.org/books?page=2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
      testRunner.And("\'LastPage\' should be Uri \'http://wikibus.org/books?page=2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
