// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace wikibus.tests.Mappings
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Mapping Brochures from SQL to RDF")]
    public partial class MappingBrochuresFromSQLToRDFFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MappingBrochures.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Mapping Brochures from SQL to RDF", " Make sure that correct RDF is returned for SQL rows", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping brochure row")]
        public virtual void MappingBrochureRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping brochure row", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "SourceType",
                        "Language",
                        "Language2",
                        "Pages",
                        "Year",
                        "Month",
                        "Day",
                        "Notes",
                        "FolderCode",
                        "FolderName",
                        "BookTitle",
                        "BookAuthor",
                        "BookISBN",
                        "MagIssueMagazine",
                        "MagIssueNumber",
                        "FileMimeType",
                        "Url",
                        "FileName"});
            table1.AddRow(new string[] {
                        "1",
                        "folder",
                        "tr",
                        "en",
                        "2",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "Türkkar City Angel E.D.",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL"});
#line 5
   testRunner.Given("table Sources.Source with data:", ((string)(null)), table1, "Given ");
#line 8
   testRunner.When("retrieve all triples", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
   testRunner.Then("resulting dataset should contain \'5\' triples", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
   testRunner.And("resulting dataset should match query:", @"base <http://wikibus.org/>
prefix wbo: <http://wikibus.org/ontology#>
prefix bibo: <http://purl.org/ontology/bibo/>
prefix dcterms: <http://purl.org/dc/terms/>

ASK
{
   <brochure/1> 
      a wbo:Brochure ;
      bibo:pages 2 ;
      dcterms:title ""Türkkar City Angel E.D."" ;
      dcterms:language <http://www.lexvo.org/page/iso639-1/tr>, 
                       <http://www.lexvo.org/page/iso639-1/en> .
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping brochure row with date")]
        public virtual void MappingBrochureRowWithDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping brochure row with date", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "SourceType",
                        "Language",
                        "Language2",
                        "Pages",
                        "Year",
                        "Month",
                        "Day",
                        "Notes",
                        "FolderCode",
                        "FolderName",
                        "BookTitle",
                        "BookAuthor",
                        "BookISBN",
                        "MagIssueMagazine",
                        "MagIssueNumber",
                        "FileMimeType",
                        "Url",
                        "FileName"});
            table2.AddRow(new string[] {
                        "6",
                        "folder",
                        "pl",
                        "NULL",
                        "2",
                        "2006",
                        "9",
                        "21",
                        "NULL",
                        "BED 81419 2006-09-21 POL Version 2",
                        "Fakty: Autobus turystyczny Volvo B9r/Sunsundegui Elegance",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL"});
#line 29
   testRunner.Given("table Sources.Source with data:", ((string)(null)), table2, "Given ");
#line 32
   testRunner.When("retrieve all triples", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
   testRunner.Then("resulting dataset should contain \'8\' triples", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
   testRunner.And("resulting dataset should match query:", @"base <http://wikibus.org/>
prefix wbo: <http://wikibus.org/ontology#>
prefix bibo: <http://purl.org/ontology/bibo/>
prefix dcterms: <http://purl.org/dc/terms/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix opus: <http://lsdis.cs.uga.edu/projects/semdis/opus#>
prefix langIso: <http://www.lexvo.org/page/iso639-1/>

ASK
{
   <brochure/6> 
      a wbo:Brochure ;
      bibo:pages 2 ;
      dcterms:title ""Fakty: Autobus turystyczny Volvo B9r/Sunsundegui Elegance"" ;
      opus:year ""2006""^^xsd:gYear ;
      opus:month ""9""^^xsd:gMonth ;
      dcterms:date ""2006-9-21""^^xsd:date ;
      dcterms:language langIso:pl ;
      dcterms:identifier ""BED 81419 2006-09-21 POL Version 2"" .
}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping brochure row with incomplete date")]
        public virtual void MappingBrochureRowWithIncompleteDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping brochure row with incomplete date", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "SourceType",
                        "Language",
                        "Language2",
                        "Pages",
                        "Year",
                        "Month",
                        "Day",
                        "Notes",
                        "FolderCode",
                        "FolderName",
                        "BookTitle",
                        "BookAuthor",
                        "BookISBN",
                        "MagIssueMagazine",
                        "MagIssueNumber",
                        "FileMimeType",
                        "Url",
                        "FileName"});
            table3.AddRow(new string[] {
                        "6",
                        "folder",
                        "pl",
                        "NULL",
                        "2",
                        "2006",
                        "NULL",
                        "NULL",
                        "NULL",
                        "BED 81419 2006-09-21 POL Version 2",
                        "Fakty: Autobus turystyczny Volvo B9r/Sunsundegui Elegance",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL"});
#line 59
   testRunner.Given("table Sources.Source with data:", ((string)(null)), table3, "Given ");
#line 62
   testRunner.When("retrieve all triples", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
   testRunner.Then("resulting dataset should contain \'6\' triples", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
   testRunner.And("resulting dataset should not match query:", "base <http://wikibus.org/>\r\nprefix dcterms: <http://purl.org/dc/terms/>\r\n\r\nASK\r\n{" +
                    "\r\n   <brochure/6> dcterms:date ?date\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping complete book row")]
        public virtual void MappingCompleteBookRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping complete book row", ((string[])(null)));
#line 75
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "SourceType",
                        "Language",
                        "Language2",
                        "Pages",
                        "Year",
                        "Month",
                        "Day",
                        "Notes",
                        "FolderCode",
                        "FolderName",
                        "BookTitle",
                        "BookAuthor",
                        "BookISBN",
                        "MagIssueMagazine",
                        "MagIssueNumber",
                        "FileMimeType",
                        "Url",
                        "FileName"});
            table4.AddRow(new string[] {
                        "407",
                        "book",
                        "pl",
                        "NULL",
                        "140",
                        "2010",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "Pojazdy samochodowe i przyczepy Jelcz 1952-1970",
                        "Wojciech Polomski",
                        "9788320617412",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL"});
#line 76
   testRunner.Given("table Sources.Source with data:", ((string)(null)), table4, "Given ");
#line 79
    testRunner.When("retrieve all triples", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
    testRunner.Then("resulting dataset should contain \'8\' triples", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
     testRunner.And("resulting dataset should match query:", @" base <http://wikibus.org/>
 prefix wbo: <http://wikibus.org/ontology#>
 prefix bibo: <http://purl.org/ontology/bibo/>
 prefix dcterms: <http://purl.org/dc/terms/>
 prefix xsd: <http://www.w3.org/2001/XMLSchema#>
 prefix opus: <http://lsdis.cs.uga.edu/projects/semdis/opus#>
 prefix langIso: <http://www.lexvo.org/page/iso639-1/>
 prefix sch: <http://schema.org/>

 ASK
 {
    <book/407> a wbo:Book ;
       dcterms:title ""Pojazdy samochodowe i przyczepy Jelcz 1952-1970"" ;
       sch:isbn ""9788320617412"" ;
       sch:author [ sch:name ""Wojciech Polomski"" ] ;
       bibo:pages 140 ;
       opus:year ""2010""^^xsd:gYear ;
       dcterms:language langIso:pl .
 }", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mapping complete magazine issue row")]
        public virtual void MappingCompleteMagazineIssueRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mapping complete magazine issue row", ((string[])(null)));
#line 104
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "SourceType",
                        "Language",
                        "Language2",
                        "Pages",
                        "Year",
                        "Month",
                        "Day",
                        "Notes",
                        "FolderCode",
                        "FolderName",
                        "BookTitle",
                        "BookAuthor",
                        "BookISBN",
                        "MagIssueMagazine",
                        "MagIssueNumber",
                        "FileMimeType",
                        "Url",
                        "FileName"});
            table5.AddRow(new string[] {
                        "324",
                        "magissue",
                        "pl",
                        "NULL",
                        "16",
                        "2007",
                        "3",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "NULL",
                        "1",
                        "13",
                        "NULL",
                        "NULL",
                        "NULL",
                        ""});
#line 105
   testRunner.Given("table Sources.Source with data:", ((string)(null)), table5, "Given ");
#line 108
    testRunner.When("retrieve all triples", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 109
    testRunner.Then("resulting dataset should contain \'6\' triples", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
