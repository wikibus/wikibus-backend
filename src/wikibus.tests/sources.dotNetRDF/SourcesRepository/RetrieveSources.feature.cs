// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace wikibus.tests.Sources_DotNetRDF.SourcesRepository
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Retrieve sources from repository")]
    public partial class RetrieveSourcesFromRepositoryFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RetrieveSources.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Retrieve sources from repository", "   Verify that models are correctly deserialized from RDF", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get simple brochure")]
        public virtual void GetSimpleBrochure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get simple brochure", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 5
   testRunner.Given("RDF data:", @"@base <http://wikibus.org/> .
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.

{
  <http://data.wikibus.org/graph/> foaf:primaryTopic <brochure/VanHool+T8>
}

<http://data.wikibus.org/graph/> {
   <brochure/VanHool+T8> a <ontology#Brochure> ;
      dcterms:title ""VanHool T8 - New Look"" .
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
   testRunner.When("brochure <http://wikibus.org/brochure/VanHool+T8> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
   testRunner.Then("\'Title\' should be string equal to \'VanHool T8 - New Look\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get brochure with Polish diacritics")]
        public virtual void GetBrochureWithPolishDiacritics()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get brochure with Polish diacritics", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 24
   testRunner.Given("RDF data:", @"@base <http://wikibus.org/> .
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.

{
  <http://data.wikibus.org/graph/> foaf:primaryTopic <brochure/12345>
}

<http://data.wikibus.org/graph/> {
   <brochure/12345> a <ontology#Brochure> ;
      dcterms:title ""Jelcz M11 - nowość"" .
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
   testRunner.When("brochure <http://wikibus.org/brochure/12345> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
   testRunner.Then("\'Title\' should be string equal to \'Jelcz M11 - nowość\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get complete brochure")]
        public virtual void GetCompleteBrochure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get complete brochure", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 43
    testRunner.Given("RDF data:", @"@base <http://wikibus.org/>.
@prefix wbo: <http://wikibus.org/ontology#>.
@prefix bibo: <http://purl.org/ontology/bibo/>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix opus: <http://lsdis.cs.uga.edu/projects/semdis/opus#>.
@prefix langIso: <http://lexvo.org/id/iso639-1/>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix sch: <http://schema.org/>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.

{
   <http://data.wikibus.org/graph/> foaf:primaryTopic <brochure/6>
}

<http://data.wikibus.org/graph/> {
    <brochure/6> 
        a wbo:Brochure ;
        bibo:pages 2 ;
        dcterms:title ""Fakty: Autobus turystyczny Volvo B9r/Sunsundegui Elegance"" ;
        opus:year ""2006""^^xsd:gYear ;
        opus:month ""9""^^xsd:gMonth ;
        dcterms:date ""2006-9-21""^^xsd:date ;
        dcterms:language langIso:pl ;
        dcterms:identifier ""BED 81419 2006-09-21 POL Version 2"" ;
        rdfs:comment ""Some description about brochure"" ;
        wbo:hasImage true .
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
    testRunner.When("brochure <http://wikibus.org/brochure/6> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
    testRunner.Then("\'Title\' should be string equal to \'Fakty: Autobus turystyczny Volvo B9r/Sunsundeg" +
                    "ui Elegance\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
     testRunner.And("\'Pages\' should be integer equal to \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
     testRunner.And("\'Date\' should be DateTime equal to \'2006-09-21\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
     testRunner.And("\'Month\' should be integer equal to \'9\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
     testRunner.And("\'Code\' should be string equal to \'BED 81419 2006-09-21 POL Version 2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
     testRunner.And("Languages should contain \'pl\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
     testRunner.And("\'Description\' should be string equal to \'Some description about brochure\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
     testRunner.And("\'Image\' should be not null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
     testRunner.And("\'Image.ContentUrl\' should be string equal to \'http://wikibus.org/brochure/6/image" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get brochure without data")]
        public virtual void GetBrochureWithoutData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get brochure without data", ((string[])(null)));
#line 85
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 86
    testRunner.Given("RDF data:", @"@base <http://wikibus.org/>.
@prefix wbo: <http://wikibus.org/ontology#>.
@prefix bibo: <http://purl.org/ontology/bibo/>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix opus: <http://lsdis.cs.uga.edu/projects/semdis/opus#>.
@prefix langIso: <http://lexvo.org/id/iso639-1/>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.

{
   <http://data.wikibus.org/graph/> foaf:primaryTopic <brochure/6>
}

<http://data.wikibus.org/graph/> {
    <brochure/6> 
        a wbo:Brochure ;
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
    testRunner.When("brochure <http://wikibus.org/brochure/6> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
    testRunner.Then("\'Title\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 109
     testRunner.And("\'Pages\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
     testRunner.And("\'Date\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
     testRunner.And("\'Month\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
     testRunner.And("\'Code\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
     testRunner.And("\'Languages\' should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
     testRunner.And("\'Description\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get complete book")]
        public virtual void GetCompleteBook()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get complete book", ((string[])(null)));
#line 116
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 117
    testRunner.Given("RDF data:", @"@base <http://wikibus.org/>.
@prefix wbo: <http://wikibus.org/ontology#>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix sch: <http://schema.org/>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.

{
   <http://data.wikibus.org/graph/> foaf:primaryTopic <book/6>
}

<http://data.wikibus.org/graph/> {
    <book/6> 
        a wbo:Book ;
        dcterms:title ""Strassenbahnen in Schlesien"" ;
        sch:isbn ""3879434247"" ;
        wbo:hasImage true .
    <book/6> sch:author [ sch:name ""Siegfried Bufe"" ].
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 138
    testRunner.When("book <http://wikibus.org/book/6> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 139
    testRunner.Then("\'Title\' should be string equal to \'Strassenbahnen in Schlesien\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 140
     testRunner.And("\'Author\' should be not null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
     testRunner.And("\'Author.Name\' should be string equal to \'Siegfried Bufe\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
     testRunner.And("\'ISBN\' should be string equal to \'3879434247\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
     testRunner.And("\'Image\' should be not null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
     testRunner.And("\'Image.ContentUrl\' should be string equal to \'http://wikibus.org/book/6/image\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get book without author")]
        public virtual void GetBookWithoutAuthor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get book without author", ((string[])(null)));
#line 146
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 147
    testRunner.Given("RDF data:", @"@base <http://wikibus.org/>.
@prefix wbo: <http://wikibus.org/ontology#>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix sch: <http://schema.org/>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.

{
   <http://data.wikibus.org/graph/> foaf:primaryTopic <book/6>
}

<http://data.wikibus.org/graph/> {
    <book/6> 
        a wbo:Book ;
        dcterms:title ""Strassenbahnen in Schlesien"" ;
        sch:isbn ""3879434247"" .
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 166
    testRunner.When("book <http://wikibus.org/book/6> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 167
     testRunner.Then("\'Author\' should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get first page of books")]
        public virtual void GetFirstPageOfBooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get first page of books", ((string[])(null)));
#line 169
this.ScenarioSetup(scenarioInfo);
#line 170
    testRunner.Given("21 books", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 171
     testRunner.When("page 1 of http://wikibus.org/books is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 172
     testRunner.Then("\'TotalItems\' should be 21", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get last page of books")]
        public virtual void GetLastPageOfBooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get last page of books", ((string[])(null)));
#line 176
this.ScenarioSetup(scenarioInfo);
#line 177
    testRunner.Given("20 books", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 178
     testRunner.When("page 2 of http://wikibus.org/books is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 179
     testRunner.Then("\'TotalItems\' should be 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get invalid page of books")]
        public virtual void GetInvalidPageOfBooks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get invalid page of books", ((string[])(null)));
#line 184
this.ScenarioSetup(scenarioInfo);
#line 185
    testRunner.Given("20 books", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 186
     testRunner.When("page 20 of http://wikibus.org/books is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 187
     testRunner.Then("\'TotalItems\' should be 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
