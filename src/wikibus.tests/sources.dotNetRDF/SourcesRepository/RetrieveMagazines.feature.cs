// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace wikibus.tests.Sources_DotNetRDF.SourcesRepository
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Retrieve magazines from repository")]
    public partial class RetrieveMagazinesFromRepositoryFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RetrieveMagazines.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Retrieve magazines from repository", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get simple brochure")]
        public virtual void GetSimpleBrochure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get simple brochure", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 4
   testRunner.Given("RDF data:", @"@base <http://wikibus.org/> .
@prefix dcterms: <http://purl.org/dc/terms/>.
  @prefix foaf: <http://xmlns.com/foaf/0.1/>.

  {
     <http://data.wikibus.org/graph/> foaf:primaryTopic <magazine/Bus Kurier>
  }

  <http://data.wikibus.org/graph/> {
   <magazine/Bus Kurier> a <ontology#Magazine> ;
      dcterms:title ""Bus Kurier"" .
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
   testRunner.When("magazine <http://wikibus.org/magazine/Bus Kurier> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
   testRunner.Then("\'Title\' should be string equal to \'Bus Kurier\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
    testRunner.And("\'Issues\' should be Uri \'http://wikibus.org/magazine/Bus%20Kurier/issues\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get single issue")]
        public virtual void GetSingleIssue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get single issue", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 24
    testRunner.Given("RDF data:", @"@base <http://wikibus.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.

{
   <http://data.wikibus.org/graph/> foaf:primaryTopic <magazine/Motor/issue/161>
}

<http://data.wikibus.org/graph/> {
    <magazine/Motor/issue/161> <http://lsdis.cs.uga.edu/projects/semdis/opus#month> ""5""^^xsd:gMonth;
                               <http://lsdis.cs.uga.edu/projects/semdis/opus#year> ""1955""^^xsd:gYear;
                               <http://purl.org/dc/terms/date> ""1955-5-22""^^xsd:date;
                               <http://purl.org/dc/terms/language> <http://lexvo.org/id/iso639-1/pl>;
                               <http://purl.org/ontology/bibo/pages> 16 ;
                               <http://schema.org/isPartOf> <magazine/Motor>;
                               <http://schema.org/issueNumber> ""161""^^xsd:string;
                               a <http://schema.org/PublicationIssue>.
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
     testRunner.When("issue <http://wikibus.org/magazine/Motor/issue/161> is fetched", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
     testRunner.Then("\'Magazine.Id\' should be Uri \'http://wikibus.org/magazine/Motor\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
      testRunner.And("\'Number\' should be string equal to \'161\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
