<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Slp.r2rml4net.Storage</name>
    </assembly>
    <members>
        <member name="T:Slp.r2rml4net.Storage.Mapping.MappingProcessor">
            <summary>
            Processor for R2RML mapping
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.MappingProcessor.#ctor(TCode.r2rml4net.IR2RML)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Mapping.MappingProcessor"/> class.
            </summary>
            <param name="mapping">The R2RML mapping.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ProcessAlgebra(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the SPARQL algebra.
            </summary>
            <param name="algebra">The SPARQL algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed SPARQL algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ProcessBgp(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the basic graph pattern.
            </summary>
            <param name="bgpOp">The basic graph pattern.</param>
            <param name="context">The query context.</param>
            <returns>The processed SPARQL algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ConstrainBgp(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp,TCode.r2rml4net.Mapping.ITriplesMap,TCode.r2rml4net.Mapping.ISubjectMap,System.Uri,System.Collections.Generic.IEnumerable{TCode.r2rml4net.Mapping.IGraphMap})">
            <summary>
            Constrains the BGP using the class in R2RML mapping.
            </summary>
            <param name="bgpOp">The BGP operator.</param>
            <param name="union">The union operator to contain the result.</param>
            <param name="tripleDef">The triple definition.</param>
            <param name="subjectMap">The subject map.</param>
            <param name="classUri">The class URI.</param>
            <param name="graphMaps">The graph maps.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ConstrainBgp(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp,TCode.r2rml4net.Mapping.ITriplesMap,TCode.r2rml4net.Mapping.ISubjectMap,TCode.r2rml4net.Mapping.IPredicateMap,TCode.r2rml4net.Mapping.IRefObjectMap,System.Collections.Generic.IEnumerable{TCode.r2rml4net.Mapping.IGraphMap})">
            <summary>
            Constrains the BGP using the reference object map.
            </summary>
            <param name="bgpOp">The BGP operator.</param>
            <param name="union">The union operator to contain the result.</param>
            <param name="tripleDef">The triple definition.</param>
            <param name="subjectMap">The subject map.</param>
            <param name="predicateMap">The predicate map.</param>
            <param name="refObjectMap">The reference object map.</param>
            <param name="graphMaps">The graph maps.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ConstrainBgp(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp,TCode.r2rml4net.Mapping.ITriplesMap,TCode.r2rml4net.Mapping.ISubjectMap,TCode.r2rml4net.Mapping.IPredicateMap,TCode.r2rml4net.Mapping.IObjectMap,System.Collections.Generic.IEnumerable{TCode.r2rml4net.Mapping.IGraphMap})">
            <summary>
            Constrains the BGP using the object map.
            </summary>
            <param name="bgpOp">The BGP operator.</param>
            <param name="union">The union operator to contain the result.</param>
            <param name="tripleDef">The triple definition.</param>
            <param name="subjectMap">The subject map.</param>
            <param name="predicateMap">The predicate map.</param>
            <param name="objectMap">The object map.</param>
            <param name="graphMaps">The graph maps.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.Mapping">
            <summary>
            Gets the R2RML mapping.
            </summary>
            <value>The R2RML mapping.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.Cache">
            <summary>
            Gets the R2RML cache.
            </summary>
            <value>The R2RML cache.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap">
            <summary>
            Predicate map for class
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap"/> class.
            </summary>
            <param name="baseUri">The base URI.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.URI">
            <summary>
            Get the URI
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.ColumnName">
            <summary>
            Gets column or null if not set
            </summary>
            <value>The name of the column.</value>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.InverseExpression">
            <summary>
            Gets the inverse expression associated with this <see cref="T:TCode.r2rml4net.Mapping.ITermMap"/> or null if not set
            </summary>
            <value>The inverse expression.</value>
            <exception cref="T:System.NotSupportedException"></exception>
            <remarks>See http://www.w3.org/TR/r2rml/#inverse</remarks>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.IsColumnValued">
            <summary>
            Gets value indicating whether <a href="http://www.w3.org/TR/r2rml/#term-map">term map</a> is <a href="http://www.w3.org/TR/r2rml/#from-column">column valued</a>
            </summary>
            <value><c>true</c> if this instance is column valued; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.IsConstantValued">
            <summary>
            Gets value indicating whether <a href="http://www.w3.org/TR/r2rml/#term-map">term map</a> is <a href="http://www.w3.org/TR/r2rml/#constant">constant valued</a>
            </summary>
            <value><c>true</c> if this instance is constant valued; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.IsTemplateValued">
            <summary>
            Gets value indicating whether <a href="http://www.w3.org/TR/r2rml/#term-map">term map</a> is <a href="http://www.w3.org/TR/r2rml/#from-template">template valued</a>
            </summary>
            <value><c>true</c> if this instance is template valued; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.Template">
            <summary>
            Gets template or null if absent
            </summary>
            <value>The template.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.TermType">
            <summary>
            Gets <a href="http://www.w3.org/TR/r2rml/#term-map">term map's</a><a href="http://www.w3.org/TR/r2rml/#termtype">term type</a>
            </summary>
            <value>The type of the term.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.TermTypeURI">
            <summary>
            Returns term type set with configuration
            or a default value
            </summary>
            <value>The term type URI.</value>
            <remarks>Default value is described on http://www.w3.org/TR/r2rml/#dfn-term-type</remarks>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.BaseUri">
            <summary>
            Base mapping URI. It will be used to resolve relative values when generating terms
            </summary>
            <value>The base URI.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.Node">
            <summary>
            The node representing this <see cref="T:TCode.r2rml4net.Mapping.IMapBase" />
            </summary>
            <value>The node.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.ClassPredicateMapTermType">
            <summary>
            Term type for class predicate term
            </summary>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.ClassPredicateMapTermType.IsBlankNode">
            <summary>
            Gets value indicating whether the term map's term type is rr:BlankNode
            </summary>
            <value><c>true</c> if this instance is blank node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.ClassPredicateMapTermType.IsLiteral">
            <summary>
            Gets value indicating whether the term map's term type is rr:Literal
            </summary>
            <value><c>true</c> if this instance is literal; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassPredicateMap.ClassPredicateMapTermType.IsURI">
            <summary>
            Gets value indicating whether the term map's term type is rr:IRI
            </summary>
            <value><c>true</c> if this instance is URI; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap">
            <summary>
            Object map for class
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.#ctor(System.Uri,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap"/> class.
            </summary>
            <param name="baseUri">The base URI.</param>
            <param name="classUri">The class URI.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.URI">
            <summary>
            Gets constant object URI or null if absent
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.DataTypeURI">
            <summary>
            Gets the datatype URI of the RDF term generated from this term map
            </summary>
            <value>The data type URI.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.Language">
            <summary>
            Gets the language tag of the RDF term generated from this term map
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.Literal">
            <summary>
            Gets the literal value of the RDF term generated from this term map
            </summary>
            <value>The literal.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.ColumnName">
            <summary>
            Gets column or null if not set
            </summary>
            <value>The name of the column.</value>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.InverseExpression">
            <summary>
            Gets the inverse expression associated with this <see cref="T:TCode.r2rml4net.Mapping.ITermMap"/> or null if not set
            </summary>
            <value>The inverse expression.</value>
            <exception cref="T:System.NotSupportedException"></exception>
            <remarks>See http://www.w3.org/TR/r2rml/#inverse</remarks>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.IsColumnValued">
            <summary>
            Gets value indicating whether <a href="http://www.w3.org/TR/r2rml/#term-map">term map</a> is <a href="http://www.w3.org/TR/r2rml/#from-column">column valued</a>
            </summary>
            <value><c>true</c> if this instance is column valued; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.IsConstantValued">
            <summary>
            Gets value indicating whether <a href="http://www.w3.org/TR/r2rml/#term-map">term map</a> is <a href="http://www.w3.org/TR/r2rml/#constant">constant valued</a>
            </summary>
            <value><c>true</c> if this instance is constant valued; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.IsTemplateValued">
            <summary>
            Gets value indicating whether <a href="http://www.w3.org/TR/r2rml/#term-map">term map</a> is <a href="http://www.w3.org/TR/r2rml/#from-template">template valued</a>
            </summary>
            <value><c>true</c> if this instance is template valued; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.Template">
            <summary>
            Gets template or null if absent
            </summary>
            <value>The template.</value>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.TermType">
            <summary>
            Gets <a href="http://www.w3.org/TR/r2rml/#term-map">term map's</a><a href="http://www.w3.org/TR/r2rml/#termtype">term type</a>
            </summary>
            <value>The type of the term.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.TermTypeURI">
            <summary>
            Returns term type set with configuration
            or a default value
            </summary>
            <value>The term type URI.</value>
            <remarks>Default value is described on http://www.w3.org/TR/r2rml/#dfn-term-type</remarks>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.BaseUri">
            <summary>
            Base mapping URI. It will be used to resolve relative values when generating terms
            </summary>
            <value>The base URI.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.Node">
            <summary>
            The node representing this <see cref="T:TCode.r2rml4net.Mapping.IMapBase" />
            </summary>
            <value>The node.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.ClassObjectMapTermType">
            <summary>
            Term type for class object map
            </summary>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.ClassObjectMapTermType.IsBlankNode">
            <summary>
            Gets value indicating whether the term map's term type is rr:BlankNode
            </summary>
            <value><c>true</c> if this instance is blank node; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.ClassObjectMapTermType.IsLiteral">
            <summary>
            Gets value indicating whether the term map's term type is rr:Literal
            </summary>
            <value><c>true</c> if this instance is literal; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Mapping.MappingProcessor.ClassObjectMap.ClassObjectMapTermType.IsURI">
            <summary>
            Gets value indicating whether the term map's term type is rr:IRI
            </summary>
            <value><c>true</c> if this instance is URI; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Mapping.R2RMLCache">
            <summary>
            Cache for R2RML
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Mapping.R2RMLCache.mappingProcessor">
            <summary>
            The mapping processor
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.R2RMLCache.#ctor(Slp.r2rml4net.Storage.Mapping.MappingProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Mapping.R2RMLCache"/> class.
            </summary>
            <param name="mappingProcessor">The mapping processor.</param>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Mapping.R2RMLCache.sqlStatementCache">
            <summary>
            The SQL statement cache
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.R2RMLCache.GetSqlStatement(TCode.r2rml4net.Mapping.ITriplesMap)">
            <summary>
            Gets the SQL statement.
            </summary>
            <param name="triplesMap">The triples map.</param>
            <returns>SQL statement</returns>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Mapping.R2RMLCache.sqlTableCache">
            <summary>
            The SQL table cache
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.R2RMLCache.GetSqlTable(TCode.r2rml4net.Mapping.ITriplesMap)">
            <summary>
            Gets the SQL table.
            </summary>
            <param name="triplesMap">The triples map.</param>
            <returns>SQL table name</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Mapping.R2RMLCache.CacheDictionary`2">
            <summary>
            Cache dictionary
            </summary>
            <typeparam name="K">Key type</typeparam>
            <typeparam name="T">Value type</typeparam>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Mapping.R2RMLCache.CacheDictionary`2.getFunc">
            <summary>
            The get value function
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Mapping.R2RMLCache.CacheDictionary`2.cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.R2RMLCache.CacheDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Mapping.R2RMLCache.CacheDictionary`2"/> class.
            </summary>
            <param name="getFunc">The get value from key function.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.R2RMLCache.CacheDictionary`2.GetValueFor(`0)">
            <summary>
            Gets the value for the key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Mapping.Utils.FixesExtensions">
            <summary>
            Extension class for r2rml4net fixes
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.Utils.FixesExtensions.GetJoinConditions(TCode.r2rml4net.Mapping.IRefObjectMap)">
            <summary>
            Gets the join conditions.
            </summary>
            <param name="refObjectPattern">The reference object pattern.</param>
            <returns>IEnumerable&lt;JoinCondition&gt;.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Mapping.Utils.FixesExtensions.GetParentTriplesMap(TCode.r2rml4net.Mapping.IRefObjectMap,TCode.r2rml4net.IR2RML)">
            <summary>
            Gets the parent triples map.
            </summary>
            <param name="refObjectPattern">The reference object pattern.</param>
            <param name="mapping">The mapping.</param>
            <returns>ITriplesMap.</returns>
            <exception cref="T:System.Exception">Parent triples map not found</exception>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.ISparqlAlgebraOptimizer">
            <summary>
            Interface for SPARQL algebra optimizer
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.ISparqlAlgebraOptimizer.ProcessAlgebra(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.ISqlAlgebraOptimizer">
            <summary>
            Interface for SQL algebra optimizer
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.ISqlAlgebraOptimizer.ProcessAlgebra(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.ISqlAlgebraOptimizerOnTheFly">
            <summary>
            Interface for SQL algebra optimizer during the algebra creation
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.ISqlAlgebraOptimizerOnTheFly.ProcessAlgebraOnTheFly(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer">
            <summary>
            Join optimizer.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer"/> class.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.templateProcessor">
            <summary>
            The template processor
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.ProcessAlgebra(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.ProcessJoin(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the join.
            </summary>
            <param name="joinOp">The join operator.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.GetBgpInfo(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{TCode.r2rml4net.Mapping.ITermMap}},Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Gets the BGP information.
            </summary>
            <param name="bgp">The BGP.</param>
            <param name="variables">The variables mappings.</param>
            <param name="context">The query context.</param>
            <exception cref="T:System.Exception">There must be an object map or ref object map</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.GetPatternInfo(System.String,TCode.r2rml4net.Mapping.ITermMap,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{TCode.r2rml4net.Mapping.ITermMap}},Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Gets the pattern information.
            </summary>
            <param name="varName">Name of the variable.</param>
            <param name="termMap">The term map.</param>
            <param name="variables">The variables mappings.</param>
            <param name="context">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.ProcessBgp(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{TCode.r2rml4net.Mapping.ITermMap}},Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the BGP.
            </summary>
            <param name="bgp">The BGP.</param>
            <param name="variables">The variables mappings.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if the variables can match also other mappings, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.ProcessPatternInfo(System.String,TCode.r2rml4net.Mapping.ITermMap,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{TCode.r2rml4net.Mapping.ITermMap}},Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the pattern information.
            </summary>
            <param name="varName">Name of the variable.</param>
            <param name="termMap">The term map.</param>
            <param name="variables">The variables mappings.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if the pattern can match also other mappings, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.canMatchCache">
            <summary>
            The cache for can match
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.GetCachedCanMatch(TCode.r2rml4net.Mapping.ITermMap,TCode.r2rml4net.Mapping.ITermMap)">
            <summary>
            Gets the cached can match.
            </summary>
            <param name="first">The first mapping.</param>
            <param name="second">The second mapping.</param>
            <returns><c>true</c> if they can match, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.SetCanMatchCache(TCode.r2rml4net.Mapping.ITermMap,TCode.r2rml4net.Mapping.ITermMap,System.Boolean)">
            <summary>
            Sets the can match cache.
            </summary>
            <param name="first">The first term.</param>
            <param name="second">The second term.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanMatch(TCode.r2rml4net.Mapping.ITermMap,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the first mapping can match the second mapping.
            </summary>
            <param name="first">The first mapping.</param>
            <param name="second">The second mapping.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if first mapping can match the second one; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanTemplateMatch(TCode.r2rml4net.Mapping.ITermMap,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the first template mapping can match the second mapping.
            </summary>
            <param name="first">The first template mapping.</param>
            <param name="second">The second mapping.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if first mapping can match the second one; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanColumnMatch(TCode.r2rml4net.Mapping.ITermMap,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the first column mapping can match the second mapping.
            </summary>
            <param name="first">The first column mapping.</param>
            <param name="second">The second mapping.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if first mapping can match the second one; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanMatch(System.String,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the first literal mapping can match the second mapping.
            </summary>
            <param name="literal">The literal mapping.</param>
            <param name="second">The second mapping.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if first mapping can match the second one; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanMatch(System.Uri,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the first URI mapping can match the second mapping.
            </summary>
            <param name="uri">The first URI mapping.</param>
            <param name="second">The second mapping.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if first mapping can match the second one; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanMatch(System.Uri,System.Uri,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the URIs can match.
            </summary>
            <param name="firstUri">The first URI.</param>
            <param name="secondUri">The second URI.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if the URIs can match; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanMatch(System.String,System.String,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the literals can match.
            </summary>
            <param name="firstLiteral">The first literal.</param>
            <param name="secondLiteral">The second literal.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if the literals can match; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanMatch(System.String,System.Uri,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the literal can match uri.
            </summary>
            <param name="literal">The first literal.</param>
            <param name="uri">The second URI.</param>
            <param name="context">The query context.</param>
            <returns><c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanTemplatesMatch(TCode.r2rml4net.Mapping.ITermMap,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the template mappings can match.
            </summary>
            <param name="firstTemplateTermMap">The first template mapping.</param>
            <param name="secondTemplateTermMap">The second template mapping.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if the template mappings can match; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanTemplateMatchColumn(TCode.r2rml4net.Mapping.ITermMap,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the template mapping can match the column mapping.
            </summary>
            <param name="firstTemplateTermMap">The first template mapping.</param>
            <param name="secondColumnTermMap">The second column mapping.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if the mappings can match; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanMatchTemplate(System.String,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the literal can match the template mapping.
            </summary>
            <param name="literal">The literal.</param>
            <param name="templateTermMap">The template mapping.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if the mappings can match; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanMatchTemplate(System.Uri,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the URI can match the template mapping.
            </summary>
            <param name="uri">The URI.</param>
            <param name="templateTermMap">The template mapping.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if the mappings can match; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanColumnsMatch(TCode.r2rml4net.Mapping.ITermMap,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the column mappings can match.
            </summary>
            <param name="firstColumnTermMap">The first column mapping.</param>
            <param name="secondColumnTermMap">The second column mapping.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if the mappings can match; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanMatchColumn(System.String,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the literal can match the column mapping.
            </summary>
            <param name="literal">The literal.</param>
            <param name="columnTermMap">The column mapping.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if the mappings can match; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanMatchColumn(System.Uri,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether the URI can match the column mapping.
            </summary>
            <param name="uri">The URI.</param>
            <param name="columnTermMap">The column mapping.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if the mappings can match; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanMatchFunction``1(TCode.r2rml4net.Mapping.ITermMap,System.Func{System.Uri,``0},System.Func{System.String,``0},System.Func{TCode.r2rml4net.Mapping.ITermMap,``0},System.Func{TCode.r2rml4net.Mapping.ITermMap,``0})">
            <summary>
            The can match function.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="decider">The mapping chosen as decider which function will be used.</param>
            <param name="constantUriFunc">The constant URI function.</param>
            <param name="constantLiteralFunc">The constant literal function.</param>
            <param name="columnFunc">The column function.</param>
            <param name="templateFunc">The template function.</param>
            <exception cref="T:System.Exception">
            Object map must be an IRI or Literal
            or
            Constant value term must be uri valued or an object map
            or
            Term must be constant, column or template valued
            </exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.TemplateMatchCheck(System.String,System.String,System.Boolean)">
            <summary>
            Can the template match the value.
            </summary>
            <param name="template">The template.</param>
            <param name="value">The value.</param>
            <param name="isIri">if set to <c>true</c> the values are IRI.</param>
            <returns><c>true</c> if the template can match the value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.TemplatesMatchCheck(System.String,System.String,System.Boolean)">
            <summary>
            Can the templates match.
            </summary>
            <param name="firstTemplate">The first template.</param>
            <param name="secondTemplate">The second template.</param>
            <param name="isIri">if set to <c>true</c> the values are IRI.</param>
            <returns><c>true</c> if the templates can match, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.TemplateMatchCheck(System.String,System.String,System.Int32,System.Int32,Slp.r2rml4net.Storage.Sql.Binders.ITemplatePart[],System.String,System.String,System.Int32,System.Int32,Slp.r2rml4net.Storage.Sql.Binders.ITemplatePart[],System.Boolean)">
            <summary>
            Can the templates match.
            </summary>
            <param name="firstPrefix">The first prefix.</param>
            <param name="firstSuffix">The first suffix.</param>
            <param name="firstIndex">The first index.</param>
            <param name="firstEndIndex">The first index of the end.</param>
            <param name="firstParts">The first parts.</param>
            <param name="secondPrefix">The second prefix.</param>
            <param name="secondSuffix">The second suffix.</param>
            <param name="secondIndex">The index of the second.</param>
            <param name="secondEndIndex">the end index of the second.</param>
            <param name="secondParts">The second parts.</param>
            <param name="isIri">if set to <c>true</c> the values are IRI.</param>
            <returns><c>true</c> if the templates can match, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.CanColumnMatch(System.String@,System.String@,System.Int32@,System.Int32@,Slp.r2rml4net.Storage.Sql.Binders.ITemplatePart[],System.String@,System.String@,System.Int32@,System.Int32@,Slp.r2rml4net.Storage.Sql.Binders.ITemplatePart[])">
            <summary>
            Can the templates match, when one of them starts with column
            </summary>
            <param name="firstPrefix">The first prefix.</param>
            <param name="firstSuffix">The first suffix.</param>
            <param name="firstIndex">The first index.</param>
            <param name="firstEndIndex">The first index of the end.</param>
            <param name="firstParts">The first parts.</param>
            <param name="secondPrefix">The second prefix.</param>
            <param name="secondSuffix">The second suffix.</param>
            <param name="secondIndex">The index of the second.</param>
            <param name="secondEndIndex">the end index of the second.</param>
            <param name="secondParts">The second parts.</param>
            <remarks>It does not return a value, it only skips the parts that can match</remarks>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.SuffixMatch(System.String@,System.String@)">
            <summary>
            Can suffixes match
            </summary>
            <param name="firstSuffix">The first suffix.</param>
            <param name="secondSuffix">The second suffix.</param>
            <returns><c>true</c> if they can match, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.PrefixMatch(System.String@,System.String@)">
            <summary>
            Can prefixes match.
            </summary>
            <param name="firstPrefix">The first prefix.</param>
            <param name="secondPrefix">The second prefix.</param>
            <returns><c>true</c> if they can match, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.ExtractStartEndFromTemplates(System.String@,System.String@,System.Int32@,System.Int32@,Slp.r2rml4net.Storage.Sql.Binders.ITemplatePart[])">
            <summary>
            Extracts the start and end from template.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="suffix">The suffix.</param>
            <param name="index">The index.</param>
            <param name="endIndex">The end index.</param>
            <param name="parts">The parts.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.JoinOptimizer.SkipToFirstNotIUnreserverdCharacter(System.String@,System.String@,System.Int32@,System.Int32@,Slp.r2rml4net.Storage.Sql.Binders.ITemplatePart[])">
            <summary>
            Skips to first not iunreserverd character.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="suffix">The suffix.</param>
            <param name="index">The index.</param>
            <param name="endIndex">The end index.</param>
            <param name="parts">The parts.</param>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.R2RMLOptimizer">
            <summary>
            R2RML mapping optimization
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.R2RMLOptimizer.ProcessAlgebra(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.R2RMLOptimizer.ProcessBgp(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the BGP.
            </summary>
            <param name="bgpOp">The BGP op.</param>
            <param name="context">The context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.R2RMLOptimizer.CanPredicateMatch(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Can the predicate match.
            </summary>
            <param name="bgpOp">The BGP operator.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if it can match the specified BGP operator; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.R2RMLOptimizer.CanSubjectMatch(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Can the subject match.
            </summary>
            <param name="bgpOp">The BGP operator.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if it can match the specified BGP operator; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.R2RMLOptimizer.CanObjectMatch(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Can the object match.
            </summary>
            <param name="bgpOp">The BGP operator.</param>
            <param name="context">The query context.</param>
            <returns><c>true</c> if it can match the specified BGP operator; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Exception">R2RMLObjectMap or R2RMLRefObjectMap must be assigned</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.R2RMLOptimizer.CanMatch(VDS.RDF.Query.Patterns.NodeMatchPattern,TCode.r2rml4net.Mapping.ITermMap)">
            <summary>
            Determines whether the pattern can match the mapping.
            </summary>
            <param name="nmp">The pattern.</param>
            <param name="r2rmlTerm">The R2RML mapping.</param>
            <returns><c>true</c> if the pattern can match the mapping; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Exception">IObjectMap must have URI or Literal assigned.</exception>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.SelectIntoUnionOptimizer">
            <summary>
            Select into union optimization
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.SelectIntoUnionOptimizer.ProcessAlgebra(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.SelectIntoUnionOptimizer.ProcessSelect(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp,System.Object)">
            <summary>
            Processes the select.
            </summary>
            <param name="selectOp">The select operator.</param>
            <param name="data">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.SelectIntoUnionOptimizer.CreateProjection(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Creates the projection.
            </summary>
            <param name="selectOp">The select operator.</param>
            <param name="source">The source.</param>
            <param name="context">The query context.</param>
            <returns>The select operator.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.SelectIntoUnionOptimizer.IsProjectionOnly(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp)">
            <summary>
            Determines whether the specified select op is projection only.
            </summary>
            <param name="selectOp">The select operator.</param>
            <returns><c>true</c> if the specified select op is projection only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer">
            <summary>
            The union optimizer
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor">
            <summary>
            Visitor for sparql query
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Utils.IVisitor">
            <summary>
            The visitor for visitor pattern
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,System.Object)">
            <summary>
            Visits the specified BGP operator.
            </summary>
            <param name="bgpOp">The BGP operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp,System.Object)">
            <summary>
            Visits the specified join operator.
            </summary>
            <param name="joinOp">The join operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OneEmptySolutionOp,System.Object)">
            <summary>
            Visits the specified one empty solution operator.
            </summary>
            <param name="oneEmptySolutionOp">The one empty solution operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp,System.Object)">
            <summary>
            Visits the specified union operator.
            </summary>
            <param name="unionOp">The union operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.NoSolutionOp,System.Object)">
            <summary>
            Visits the specified no solution operator.
            </summary>
            <param name="noSolutionOp">The no solution operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp,System.Object)">
            <summary>
            Visits the specified select operator.
            </summary>
            <param name="selectOp">The select operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp,System.Object)">
            <summary>
            Visits the specified slice operator.
            </summary>
            <param name="sliceOp">The slice operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp,System.Object)">
            <summary>
            Visits the specified order by operator.
            </summary>
            <param name="orderByOp">The order by operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.DistinctOp,System.Object)">
            <summary>
            Visits the specified distinct operator.
            </summary>
            <param name="distinctOp">The distinct operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ReducedOp,System.Object)">
            <summary>
            Visits the specified reduced operator.
            </summary>
            <param name="reducedOp">The reduced operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp,System.Object)">
            <summary>
            Visits the specified bind operator.
            </summary>
            <param name="bindOp">The bind operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.joinOptimizer">
            <summary>
            The join optimizer
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.ProcessAlgebra(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,System.Object)">
            <summary>
            Visits the specified BGP operator.
            </summary>
            <param name="bgpOp">The BGP operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp,System.Object)">
            <summary>
            Visits the specified join operator.
            </summary>
            <param name="joinOp">The join operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.CreateCartesians(System.Collections.Generic.List{Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery},System.Collections.Generic.List{Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp},Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Creates the cartesian product.
            </summary>
            <param name="subQueries">The sub queries.</param>
            <param name="subUnions">The sub unions.</param>
            <param name="context">The query context.</param>
            <returns>The cartesian product.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.ProcessCartesian(System.Collections.Generic.List{Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.CartesianResult},System.Collections.Generic.IEnumerable{Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery},Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the current cartesian product.
            </summary>
            <param name="currentCartesians">The current cartesian product.</param>
            <param name="union">The union.</param>
            <param name="context">The query context.</param>
            <returns>The cartesian product.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.ProcessJoinChild(System.Collections.Generic.List{Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery},System.Collections.Generic.List{Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp},Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Processes the join child.
            </summary>
            <param name="subQueries">The sub queries.</param>
            <param name="subUnions">The sub unions.</param>
            <param name="inner">The inner query.</param>
            <param name="oldInner">The old inner query.</param>
            <returns><c>true</c> if modified, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OneEmptySolutionOp,System.Object)">
            <summary>
            Visits the specified one empty solution operator.
            </summary>
            <param name="oneEmptySolutionOp">The one empty solution operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp,System.Object)">
            <summary>
            Visits the specified union operator.
            </summary>
            <param name="unionOp">The union operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.ProcessUnionChild(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Processes the union child.
            </summary>
            <param name="newUnion">The new union.</param>
            <param name="inner">The inner query.</param>
            <param name="oldInner">The old inner query.</param>
            <returns><c>true</c> if modified, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.NoSolutionOp,System.Object)">
            <summary>
            Visits the specified no solution operator.
            </summary>
            <param name="noSolutionOp">The no solution operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp,System.Object)">
            <summary>
            Visits the specified select operator.
            </summary>
            <param name="selectOp">The select operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp,System.Object)">
            <summary>
            Visits the specified slice operator.
            </summary>
            <param name="sliceOp">The slice operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp,System.Object)">
            <summary>
            Visits the specified order by operator.
            </summary>
            <param name="orderByOp">The order by operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.DistinctOp,System.Object)">
            <summary>
            Visits the specified distinct operator.
            </summary>
            <param name="distinctOp">The distinct operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ReducedOp,System.Object)">
            <summary>
            Visits the specified reduced operator.
            </summary>
            <param name="reducedOp">The reduced operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp,System.Object)">
            <summary>
            Visits the specified bind operator.
            </summary>
            <param name="bindOp">The bind operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.CartesianResult">
            <summary>
            Cartesian result
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.CartesianResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.CartesianResult"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.CartesianResult.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.CartesianResult.Variables">
            <summary>
            Gets the variables mappings.
            </summary>
            <value>The variables.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.CartesianResult.Queries">
            <summary>
            Gets the queries.
            </summary>
            <value>The queries.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.VisitData">
            <summary>
            The visit data.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.VisitData.visited">
            <summary>
            The visited operators
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.VisitData.#ctor(Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.VisitData"/> class.
            </summary>
            <param name="context">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.VisitData.IsVisited(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Determines whether the specified query is visited.
            </summary>
            <param name="query">The query.</param>
            <returns><c>true</c> if the specified query is visited; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.VisitData.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Visits the specified query.
            </summary>
            <param name="query">The query context.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SparqlAlgebra.UnionOptimizer.VisitData.Context">
            <summary>
            Gets or sets the query context.
            </summary>
            <value>The query context.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer">
            <summary>
            Base condition optimizer
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor">
            <summary>
            Visitor for SQL source
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource,System.Object)">
            <summary>
            Visits the specified no row source.
            </summary>
            <param name="noRowSource">The no row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource,System.Object)">
            <summary>
            Visits the specified single empty row source.
            </summary>
            <param name="singleEmptyRowSource">The single empty row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,System.Object)">
            <summary>
            Visits the specified SQL select operator.
            </summary>
            <param name="sqlSelectOp">The SQL select operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp,System.Object)">
            <summary>
            Visits the specified SQL union operator.
            </summary>
            <param name="sqlUnionOp">The SQL union operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement,System.Object)">
            <summary>
            Visits the specified SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable,System.Object)">
            <summary>
            Visits the specified SQL table.
            </summary>
            <param name="sqlTable">The SQL table.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor">
            <summary>
            Visitor for ICondition
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor">
            <summary>
            Visitor for IExpression
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.NullExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="nullExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="collateExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="caseExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.ProcessAlgebra(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.ProcessAlgebraOnTheFly(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource,System.Object)">
            <summary>
            Visits the specified no row source.
            </summary>
            <param name="noRowSource">The no row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource,System.Object)">
            <summary>
            Visits the specified single empty row source.
            </summary>
            <param name="singleEmptyRowSource">The single empty row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,System.Object)">
            <summary>
            Visits the specified SQL select operator.
            </summary>
            <param name="sqlSelectOp">The SQL select operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp,System.Object)">
            <summary>
            Visits the specified SQL union operator.
            </summary>
            <param name="sqlUnionOp">The SQL union operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement,System.Object)">
            <summary>
            Visits the specified SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable,System.Object)">
            <summary>
            Visits the specified SQL table.
            </summary>
            <param name="sqlTable">The SQL table.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer._ProcessAlwaysFalseCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition,Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.VisitData)">
            <summary>
            Processes always false condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer._ProcessAlwaysTrueCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition,Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.VisitData)">
            <summary>
            Processes always true condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer._ProcessIsNullCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition,Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.VisitData)">
            <summary>
            Processes is null condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer._ProcessNotCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition,Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.VisitData)">
            <summary>
            Processes not condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer._ProcessOrCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition,Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.VisitData)">
            <summary>
            Processes or condition.
            </summary>
            <param name="orCondition">The or condition.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer._ProcessAndCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition,Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.VisitData)">
            <summary>
            Processes and condition.
            </summary>
            <param name="andCondition">The and condition.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer._ProcessEqualsCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.VisitData)">
             <summary>
            Processes equals condition.
             </summary>
             <param name="equalsCondition">The equals condition.</param>
             <param name="data">The data.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.NullExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="nullExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="coalesceExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="caseExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.ProcessAlwaysFalseCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the always false condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="visitData">The visit data.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.ProcessAlwaysTrueCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the always true condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="queryContext">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.ProcessAndCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the and condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="queryContext">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.ProcessEqualsCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the equals condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="queryContext">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.ProcessIsNullCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the is null condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="queryContext">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.ProcessNotCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the not condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="queryContext">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.ProcessOrCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the or condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="queryContext">The query context.</param>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.VisitData">
            <summary>
            Visit data for the visitor
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.VisitData.ForSecondRun">
            <summary>
            Data for the second run.
            </summary>
            <returns>VisitData.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.VisitData.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.VisitData.SecondRun">
            <summary>
            Gets or sets a value indicating whether it is second run.
            </summary>
            <value><c>true</c> if it is second run; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.BaseConditionOptimizer.VisitData.IsOnTheFly">
            <summary>
            Gets or sets a value indicating whether this instance is on the fly optimization.
            </summary>
            <value><c>true</c> if this instance is on the fly; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer">
            <summary>
            CONCAT in equal optimization
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.ProcessEqualsCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the equals condition.
            </summary>
            <param name="equalsCondition">The equals condition.</param>
            <param name="context">The context.</param>
            <returns>ICondition.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.ExpandEquals(Slp.r2rml4net.Storage.Sql.Algebra.IExpression,Slp.r2rml4net.Storage.Sql.Algebra.IExpression,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Expands the equals operator.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.ExpandEquals(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,Slp.r2rml4net.Storage.Sql.Algebra.IExpression,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Expands the equals operator.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.ExpandEquals(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Expands the equals operator.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.ExpandEquals(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Expands the equals operator.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.CanOptimize(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Determines whether we can optimize the specified operand.
            </summary>
            <param name="operand">The operand.</param>
            <param name="context">The context.</param>
            <returns><c>true</c> if we can optimize the specified operand; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.ProcessConcatenationEquals(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the concatenation equals operator.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.ProcessEscapedConcatenation(Slp.r2rml4net.Storage.Sql.Algebra.IExpression[],Slp.r2rml4net.Storage.Sql.Algebra.IExpression[],Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the escaped concatenation.
            </summary>
            <param name="leftParts">The left parts.</param>
            <param name="rightParts">The right parts.</param>
            <param name="context">The context.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.ProcessNotEscapedConcatenation(Slp.r2rml4net.Storage.Sql.Algebra.IExpression[],Slp.r2rml4net.Storage.Sql.Algebra.IExpression[],Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the not escaped concatenation.
            </summary>
            <param name="leftParts">The left parts.</param>
            <param name="rightParts">The right parts.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.CreateConcatenationEqual(System.Int32,System.Int32,System.String,System.String,Slp.r2rml4net.Storage.Sql.Algebra.IExpression[])">
            <summary>
            Creates the concatenation equal.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="prefix">The prefix.</param>
            <param name="suffix">The suffix.</param>
            <param name="parts">The parts.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.SuffixComparison(System.String@,System.String@,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Compares the suffixes
            </summary>
            <param name="leftSuffix">The left suffix.</param>
            <param name="rightSuffix">The right suffix.</param>
            <param name="context">The context.</param>
            <returns>ICondition.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.PrefixComparison(System.String@,System.String@,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Compares the prefixes
            </summary>
            <param name="leftPrefix">The left prefix.</param>
            <param name="rightPrefix">The right prefix.</param>
            <param name="context">The context.</param>
            <returns>ICondition.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.GetSuffix(Slp.r2rml4net.Storage.Sql.Algebra.IExpression[],System.Int32,System.Int32@)">
            <summary>
            Gets the suffix.
            </summary>
            <param name="parts">The parts.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">
            Should not happen after passing CanWeOptimize method (value is not string)
            or
            Should not happen after passing CanWeOptimize method (unsupported expression type)
            </exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConcatenationInEqualConditionOptimizer.GetPrefix(Slp.r2rml4net.Storage.Sql.Algebra.IExpression[],System.Int32@)">
            <summary>
            Gets the prefix.
            </summary>
            <param name="parts">The parts.</param>
            <param name="startIndex">The start index.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">
            Should not happen after passing CanWeOptimize method (value is not string)
            or
            Should not happen after passing CanWeOptimize method (unsupported expression type)
            </exception>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConstantExprEqualityOptimizer">
            <summary>
            Comparison of constants
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConstantExprEqualityOptimizer.ProcessEqualsCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the equals condition.
            </summary>
            <param name="equalsCondition">The equals condition.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConstantExprEqualityOptimizer.ExpressionsAlwaysEqual(Slp.r2rml4net.Storage.Sql.Algebra.IExpression,Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Are expressions always equal?
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns><c>true</c> if they are always equal, <c>false</c> otherwise.</returns>
            <exception cref="T:System.Exception">Unknown expression type</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConstantExprEqualityOptimizer.ExpressionsCanBeEqual(Slp.r2rml4net.Storage.Sql.Algebra.IExpression,Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Can be the expressions equal?
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns><c>true</c> if they can be equal, <c>false</c> otherwise.</returns>
            <exception cref="T:System.Exception">Unknown expression type</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ConstantExprEqualityOptimizer.ConstantExprAreEqual(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr,Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr)">
            <summary>
            Are the constant expressions equal?
            </summary>
            <param name="constantExpr1">The constant expr1.</param>
            <param name="constantExpr2">The constant expr2.</param>
            <returns><c>true</c> if the constant expressions are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer">
            <summary>
            IS NULL optimizer
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor">
            <summary>
            Interface IValueBinderVisitor
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor.Visit(Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder,System.Object)">
            <summary>
            Visits the specified case value binder.
            </summary>
            <param name="caseValueBinder">The case value binder.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor.Visit(Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder,System.Object)">
            <summary>
            Visits the specified collate value binder.
            </summary>
            <param name="coalesceValueBinder">The coalesce value binder.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor.Visit(Slp.r2rml4net.Storage.Sql.Binders.ValueBinder,System.Object)">
            <summary>
            Visits the specified value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor.Visit(Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder,System.Object)">
            <summary>
            Visits the specified SQL side value binder.
            </summary>
            <param name="sqlSideValueBinder">The SQL side value binder.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor.Visit(Slp.r2rml4net.Storage.Sql.Binders.BlankValueBinder,System.Object)">
            <summary>
            Visits the specified blank value binder.
            </summary>
            <param name="blankValueBinder">The blank value binder.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor.Visit(Slp.r2rml4net.Storage.Sql.Binders.ExpressionValueBinder,System.Object)">
            <summary>
            Visits the specified expression value binder.
            </summary>
            <param name="expressionValueBinder">The expression value binder.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.conditionBuilder">
            <summary>
            The condition builder
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.ProcessAlgebra(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.ProcessAlgebraOnTheFly(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource,System.Object)">
            <summary>
            Visits the specified no row source.
            </summary>
            <param name="noRowSource">The no row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource,System.Object)">
            <summary>
            Visits the specified single empty row source.
            </summary>
            <param name="singleEmptyRowSource">The single empty row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,System.Object)">
            <summary>
            Visits the specified SQL select operator.
            </summary>
            <param name="sqlSelectOp">The SQL select operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp,System.Object)">
            <summary>
            Visits the specified SQL union operator.
            </summary>
            <param name="sqlUnionOp">The SQL union operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement,System.Object)">
            <summary>
            Visits the specified SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable,System.Object)">
            <summary>
            Visits the specified SQL table.
            </summary>
            <param name="sqlTable">The SQL table.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder,System.Object)">
            <summary>
            Visits the specified case value binder.
            </summary>
            <param name="caseValueBinder">The case value binder.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder,System.Object)">
            <summary>
            Visits the specified SQL side value binder.
            </summary>
            <param name="sqlSideValueBinder">The SQL side value binder.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Binders.ExpressionValueBinder,System.Object)">
            <summary>
            Visits the specified expression value binder.
            </summary>
            <param name="expressionValueBinder">The expression value binder.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder,System.Object)">
            <summary>
            Visits the specified collate value binder.
            </summary>
            <param name="coalesceValueBinder">The coalesce value binder.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Binders.BlankValueBinder,System.Object)">
            <summary>
            Visits the specified blank value binder.
            </summary>
            <param name="blankValueBinder">The blank value binder.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Binders.ValueBinder,System.Object)">
            <summary>
            Visits the specified value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.NullExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="nullExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="collateExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="caseExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.VisitData">
            <summary>
            Visit data for the optimizer
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.VisitData.#ctor(Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList,Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult,Slp.r2rml4net.Storage.Query.QueryContext,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.VisitData"/> class.
            </summary>
            <param name="ginl">The get is null list.</param>
            <param name="gres">The global result.</param>
            <param name="context">The context.</param>
            <param name="recurse">if set to <c>true</c> it should do recurse.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.VisitData.SetGlobalResult(Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult)">
            <summary>
            Sets the global result.
            </summary>
            <param name="gres">The global result.</param>
            <returns>VisitData.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.VisitData.GINL">
            <summary>
            Gets or sets the get is null list.
            </summary>
            <value>The get is null list.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.VisitData.GlobalResult">
            <summary>
            Gets or sets the global result.
            </summary>
            <value>The global result.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.VisitData.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.VisitData.Recurse">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.VisitData"/> is recurse.
            </summary>
            <value><c>true</c> if recurse; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList">
            <summary>
            Visitor that retrieves the is null list
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.conditionCache">
            <summary>
            The condition cache
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.sqlCache">
            <summary>
            The SQL cache
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Process(Slp.r2rml4net.Storage.Sql.Algebra.ICondition)">
            <summary>
            Processes the specified condition.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Process(Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource)">
            <summary>
            Processes the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource,System.Object)">
            <summary>
            Visits the specified no row source.
            </summary>
            <param name="noRowSource">The no row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource,System.Object)">
            <summary>
            Visits the specified single empty row source.
            </summary>
            <param name="singleEmptyRowSource">The single empty row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,System.Object)">
            <summary>
            Visits the specified SQL select operator.
            </summary>
            <param name="sqlSelectOp">The SQL select operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp,System.Object)">
            <summary>
            Visits the specified SQL union operator.
            </summary>
            <param name="sqlUnionOp">The SQL union operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement,System.Object)">
            <summary>
            Visits the specified SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable,System.Object)">
            <summary>
            Visits the specified SQL table.
            </summary>
            <param name="sqlTable">The SQL table.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult">
            <summary>
            The result of get is null list
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult"/> class.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.isNullColumns">
            <summary>
            The is null columns
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.isNotNullColumns">
            <summary>
            The is not null columns
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.MergeWith(Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult)">
            <summary>
            Merges with.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.IntersectWith(Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult)">
            <summary>
            Intersects with.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.AddIsNullCondition(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition)">
            <summary>
            Adds the is null condition.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.AddIsNotNullColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Adds the is not null column.
            </summary>
            <param name="col">The col.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.AddIsNullColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Adds the is null column.
            </summary>
            <param name="col">The col.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.MergeWith(System.Collections.Generic.Dictionary{Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition},System.Collections.Generic.Dictionary{Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition})">
            <summary>
            Merges with.
            </summary>
            <param name="source">The source.</param>
            <param name="with">The with.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.IntersectWith(System.Collections.Generic.Dictionary{Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition},System.Collections.Generic.Dictionary{Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition})">
            <summary>
            Intersects with.
            </summary>
            <param name="source">The source.</param>
            <param name="with">The with.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.GetInverse">
            <summary>
            Gets the inverse.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.IsInNotNullColumns(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Determines whether the column is in "is not null list".
            </summary>
            <param name="sqlColumn">The SQL column.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.IsInNullColumns(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Determines whether the column is in "is not null list".
            </summary>
            <param name="sqlColumn">The SQL column.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.IsInNullColumns(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition)">
            <summary>
            Determines whether the column is in "is null list".
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.IsNullOptimizer.GetIsNullList.GetIsNullListResult.GetForParentSource(Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource)">
            <summary>
            Gets the columns for parent source.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.Exception">
            SqlUnionColumn should be only in SqlUnionOp
            or
            Other column type than expected
            </exception>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization">
            <summary>
            REDUCED optimization
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.ProcessAlgebra(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource,System.Object)">
            <summary>
            Visits the specified no row source.
            </summary>
            <param name="noRowSource">The no row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource,System.Object)">
            <summary>
            Visits the specified single empty row source.
            </summary>
            <param name="singleEmptyRowSource">The single empty row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,System.Object)">
            <summary>
            Visits the specified SQL select operator.
            </summary>
            <param name="sqlSelectOp">The SQL select operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp,System.Object)">
            <summary>
            Visits the specified SQL union operator.
            </summary>
            <param name="sqlUnionOp">The SQL union operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement,System.Object)">
            <summary>
            Visits the specified SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable,System.Object)">
            <summary>
            Visits the specified SQL table.
            </summary>
            <param name="sqlTable">The SQL table.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.VisitData">
            <summary>
            Visit data for the visitor
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.VisitData.#ctor(Slp.r2rml4net.Storage.Query.QueryContext,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.VisitData"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="isParentReduced">if set to <c>true</c> [is parent reduced].</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.VisitData.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>VisitData.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.VisitData.SetReduced(System.Boolean)">
            <summary>
            Sets the reduced.
            </summary>
            <param name="isReduced">if set to <c>true</c> [is reduced].</param>
            <returns>VisitData.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.VisitData.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.ReducedSelectOptimization.VisitData.IsParentReduced">
            <summary>
            Gets or sets a value indicating whether this instance is parent reduced.
            </summary>
            <value><c>true</c> if this instance is parent reduced; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveNoRowSourcesOptimizer">
            <summary>
            Remove no row sources optimizer
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveNoRowSourcesOptimizer.ProcessAlgebra(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveNoRowSourcesOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource,System.Object)">
            <summary>
            Visits the specified no row source.
            </summary>
            <param name="noRowSource">The no row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveNoRowSourcesOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource,System.Object)">
            <summary>
            Visits the specified single empty row source.
            </summary>
            <param name="singleEmptyRowSource">The single empty row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveNoRowSourcesOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,System.Object)">
            <summary>
            Visits the specified SQL select operator.
            </summary>
            <param name="sqlSelectOp">The SQL select operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveNoRowSourcesOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp,System.Object)">
            <summary>
            Visits the specified SQL union operator.
            </summary>
            <param name="sqlUnionOp">The SQL union operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveNoRowSourcesOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement,System.Object)">
            <summary>
            Visits the specified SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveNoRowSourcesOptimizer.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable,System.Object)">
            <summary>
            Visits the specified SQL table.
            </summary>
            <param name="sqlTable">The SQL table.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveNoRowSourcesOptimizer.CreateNoRowSource(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource)">
            <summary>
            Creates the no row source.
            </summary>
            <param name="sqlSelectOp">The SQL select op.</param>
            <returns>NoRowSource.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization">
            <summary>
            Removes unused columns
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.ProcessAlgebra(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The query context.</param>
            <returns>The processed algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource,System.Object)">
            <summary>
            Visits the specified no row source.
            </summary>
            <param name="noRowSource">The no row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource,System.Object)">
            <summary>
            Visits the specified single empty row source.
            </summary>
            <param name="singleEmptyRowSource">The single empty row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,System.Object)">
            <summary>
            Visits the specified SQL select operator.
            </summary>
            <param name="sqlSelectOp">The SQL select operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp,System.Object)">
            <summary>
            Visits the specified SQL union operator.
            </summary>
            <param name="sqlUnionOp">The SQL union operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.GetReferencedColumnsByColumns(System.Collections.Generic.IEnumerable{Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn})">
            <summary>
            Gets the referenced columns by columns.
            </summary>
            <param name="needed">The needed.</param>
            <returns>List&lt;ISqlColumn&gt;.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.GetNeededColumnsOfValueVariables(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource)">
            <summary>
            Gets the needed columns of value variables.
            </summary>
            <param name="source">The source.</param>
            <returns>IEnumerable&lt;ISqlColumn&gt;.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.GetNeededColumnsOfOrderings(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp)">
            <summary>
            Gets the needed columns of orderings.
            </summary>
            <param name="sqlSelectOp">The SQL select op.</param>
            <returns>IEnumerable&lt;ISqlColumn&gt;.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement,System.Object)">
            <summary>
            Visits the specified SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable,System.Object)">
            <summary>
            Visits the specified SQL table.
            </summary>
            <param name="sqlTable">The SQL table.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.VisitorData">
            <summary>
            Visit data for the visitor
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.VisitorData.#ctor(System.Collections.Generic.IEnumerable{Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn})">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.VisitorData"/> class.
            </summary>
            <param name="neededColumns">The needed columns.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Optimization.SqlAlgebra.RemoveUnusedColumnsOptimization.VisitorData.NeededColumns">
            <summary>
            Gets or sets the needed columns.
            </summary>
            <value>The needed columns.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Query.QueryProcessor">
            <summary>
            Query processor
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Query.QueryProcessor.mapping">
            <summary>
            The mapping processor
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Query.QueryProcessor.db">
            <summary>
            The database
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Query.QueryProcessor.sparqlAlgebraBuilder">
            <summary>
            The sparql algebra builder
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Query.QueryProcessor.sparqlOptimizers">
            <summary>
            The sparql optimizers
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Query.QueryProcessor.sqlAlgebraBuilder">
            <summary>
            The SQL algebra builder
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Query.QueryProcessor.sqlOptimizers">
            <summary>
            The SQL optimizers
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Query.QueryProcessor.sqlOptimizersOnTheFly">
            <summary>
            The SQL optimizers on the fly
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Query.QueryProcessor.#ctor(Slp.r2rml4net.Storage.Mapping.MappingProcessor,Slp.r2rml4net.Storage.Sql.ISqlDb)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Query.QueryProcessor"/> class.
            </summary>
            <param name="mapping">The mapping.</param>
            <param name="db">The database.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Query.QueryProcessor.Query(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String)">
            <summary>
            Executes the query.
            </summary>
            <param name="rdfHandler">The RDF handler.</param>
            <param name="resultsHandler">The results handler.</param>
            <param name="sparqlQuery">The sparql query.</param>
            <exception cref="T:System.ArgumentNullException">
            resultsHandler;Cannot handle a Ask query with a null SPARQL Results Handler
            or
            rdfHandler;Cannot handle a Graph result with a null RDF Handler
            or
            rdfHandler;Cannot handle a Graph result with a null RDF Handler
            or
            resultsHandler;Cannot handle SPARQL Results with a null Results Handler
            </exception>
            <exception cref="T:System.Exception">Unable to process the results of an Unknown query type</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Query.QueryProcessor.ProcessResult(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,VDS.RDF.Query.SparqlQuery,Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Sql.IQueryResultReader)">
            <summary>
            Processes the query result.
            </summary>
            <param name="rdfHandler">The RDF handler.</param>
            <param name="resultsHandler">The results handler.</param>
            <param name="originalQuery">The original query.</param>
            <param name="context">The query context.</param>
            <param name="sqlAlgebra">The SQL algebra.</param>
            <param name="result">The SQL execution result.</param>
            <exception cref="T:System.Exception">
            Expected a column from sql query execution
            or
            Expected a single column from sql query execution
            or
            Expected a row from sql query execution
            or
            Expected 3 value binders in construct or describe query
            or
            Unable to process the results of an Unknown query type
            </exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Query.QueryProcessor.ProcessConstructTemplate(VDS.RDF.IRdfHandler,Slp.r2rml4net.Storage.Sql.IQueryResultRow,VDS.RDF.Query.Patterns.GraphPattern,Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the construct template.
            </summary>
            <param name="rdfHandler">The RDF handler.</param>
            <param name="row">The database row.</param>
            <param name="template">The template.</param>
            <param name="sqlAlgebra">The SQL algebra.</param>
            <param name="context">The query context.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Query.QueryProcessor.GenerateSqlAlgebra(Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Generates the SQL algebra.
            </summary>
            <param name="context">The query context.</param>
            <returns>The SQL algebra.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.R2RMLStorage">
            <summary>
            The R2RML Storage
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.R2RMLStorage.db">
            <summary>
            The database
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.R2RMLStorage.mapping">
            <summary>
            The mapping
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.#ctor(TCode.r2rml4net.IR2RML,Slp.r2rml4net.Storage.Sql.ISqlDb)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.R2RMLStorage"/> class.
            </summary>
            <param name="mapping">The mapping.</param>
            <param name="db">The database.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.Query(VDS.RDF.IRdfHandler,VDS.RDF.ISparqlResultsHandler,System.String)">
            <summary>
            Makes a SPARQL Query against the underlying store processing the resulting Graph/Result Set with a handler of your choice
            </summary>
            <param name="rdfHandler">RDF Handler</param>
            <param name="resultsHandler">SPARQL Results Handler</param>
            <param name="sparqlQuery">SPARQL Query</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.Query(System.String)">
            <summary>
            Makes a SPARQL Query against the underlying store
            </summary>
            <param name="sparqlQuery">SPARQL Query</param>
            <returns><see cref="T:VDS.RDF.Query.SparqlResultSet">SparqlResultSet</see> or a <see cref="T:VDS.RDF.Graph">Graph</see> depending on the Sparql Query</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.DeleteGraph(System.String)">
            <summary>
            Deletes a Graph from the Store
            </summary>
            <param name="graphUri">URI of the Graph to be deleted</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <remarks><strong>Note:</strong> Not all Stores are capable of Deleting a Graph so it is acceptable for such a Store to throw a <see cref="T:System.NotSupportedException">NotSupportedException</see> or an <see cref="T:VDS.RDF.Storage.RdfStorageException">RdfStorageException</see> if the Store cannot provide this functionality</remarks>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.DeleteGraph(System.Uri)">
            <summary>
            Deletes a Graph from the Store
            </summary>
            <param name="graphUri">URI of the Graph to be deleted</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <remarks><strong>Note:</strong> Not all Stores are capable of Deleting a Graph so it is acceptable for such a Store to throw a <see cref="T:System.NotSupportedException">NotSupportedException</see> or an <see cref="T:VDS.RDF.Storage.RdfStorageException">RdfStorageException</see> if the Store cannot provide this functionality</remarks>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.ListGraphs">
            <summary>
            Gets a List of Graph URIs for the graphs in the store
            </summary>
            <returns>IEnumerable&lt;Uri&gt;.</returns>
            <exception cref="T:System.Exception">
            Did not get uri in result set as expected
            or
            Did not get the variable in result set as expected
            or
            Did not get a SPARQL Result Set as expected
            </exception>
            <remarks>Implementations should implement this method only if they need to provide a custom way of listing Graphs.  If the Store for which you are providing a manager can efficiently return the Graphs using a SELECT DISTINCT ?g WHERE { GRAPH ?g { ?s ?p ?o } } query then there should be no need to implement this function.</remarks>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.LoadGraph(VDS.RDF.IRdfHandler,System.String)">
            <summary>
            Loads a Graph from the Store using the RDF Handler
            </summary>
            <param name="handler">RDF Handler</param>
            <param name="graphUri">URI of the Graph to load</param>
            <remarks>Behaviour of this method with regards to non-existent Graphs is up to the implementor, an empty Graph may be returned or an error thrown.  Implementors <strong>should</strong> state in the XML comments for their implementation what behaviour is implemented.</remarks>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.LoadGraph(VDS.RDF.IRdfHandler,System.Uri)">
            <summary>
            Loads a Graph from the Store using the RDF Handler
            </summary>
            <param name="handler">RDF Handler</param>
            <param name="graphUri">URI of the Graph to load</param>
            <exception cref="T:System.ArgumentException">Graph uri cannot be null  or empty;graphUri</exception>
            <remarks>Behaviour of this method with regards to non-existent Graphs is up to the implementor, an empty Graph may be returned or an error thrown.  Implementors <strong>should</strong> state in the XML comments for their implementation what behaviour is implemented.</remarks>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.LoadGraph(VDS.RDF.IGraph,System.String)">
            <summary>
            Loads a Graph from the Store
            </summary>
            <param name="g">Graph to load into</param>
            <param name="graphUri">URI of the Graph to load</param>
            <remarks><para>
            If the Graph being loaded into is Empty then it's Base Uri should become the Uri of the Graph being loaded, otherwise it should be merged into the existing non-empty Graph whose Base Uri should be unaffected.
            </para>
            <para>
            Behaviour of this method with regards to non-existent Graphs is up to the implementor, an empty Graph may be returned or an error thrown.  Implementors <strong>should</strong> state in the XML comments for their implementation what behaviour is implemented.
            </para></remarks>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.LoadGraph(VDS.RDF.IGraph,System.Uri)">
            <summary>
            Loads a Graph from the Store
            </summary>
            <param name="g">Graph to load into</param>
            <param name="graphUri">Uri of the Graph to load</param>
            <remarks><para>
            If the Graph being loaded into is Empty then it's Base Uri should become the Uri of the Graph being loaded, otherwise it should be merged into the existing non-empty Graph whose Base Uri should be unaffected.
            </para>
            <para>
            Behaviour of this method with regards to non-existent Graphs is up to the implementor, an empty Graph may be returned or an error thrown.  Implementors <strong>should</strong> state in the XML comments for their implementation what behaviour is implemented.
            </para></remarks>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.SaveGraph(VDS.RDF.IGraph)">
            <summary>
            Saves a Graph to the Store
            </summary>
            <param name="g">Graph to Save</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <remarks>Uri of the Graph should be taken from the <see cref="P:VDS.RDF.IGraph.BaseUri">BaseUri</see> property
            <br/><br/>
            Behaviour of this method with regards to whether it overwrites/updates/merges with existing Graphs of the same Uri is up to the implementor and may be dependent on the underlying store.  Implementors <strong>should</strong> state in the XML comments for their implementations what behaviour is implemented.</remarks>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.UpdateGraph(System.String,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple})">
            <summary>
            Updates a Graph in the Store
            </summary>
            <param name="graphUri">Uri of the Graph to update</param>
            <param name="additions">Triples to add to the Graph</param>
            <param name="removals">Triples to remove from the Graph</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <remarks><para>
              <strong>Note:</strong> Not all Stores are capable of supporting update at the individual Triple level and as such it is acceptable for such a Store to throw a <see cref="T:System.NotSupportedException">NotSupportedException</see> or an <see cref="T:VDS.RDF.Storage.RdfStorageException">RdfStorageException</see> if the Store cannot provide this functionality
            </para>
            <para>
            Behaviour of this method with regards to non-existent Graph is up to the implementor, it may create a new empty Graph and apply the updates to that or it may throw an error.  Implementors <strong>should</strong> state in the XML comments for their implementation what behaviour is implemented.
            </para>
            <para>
            Implementers <strong>MUST</strong> allow for either the additions or removals argument to be null
            </para></remarks>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.UpdateGraph(System.Uri,System.Collections.Generic.IEnumerable{VDS.RDF.Triple},System.Collections.Generic.IEnumerable{VDS.RDF.Triple})">
            <summary>
            Updates a Graph in the Store
            </summary>
            <param name="graphUri">Uri of the Graph to update</param>
            <param name="additions">Triples to add to the Graph</param>
            <param name="removals">Triples to remove from the Graph</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <remarks><para>
              <strong>Note:</strong> Not all Stores are capable of supporting update at the individual Triple level and as such it is acceptable for such a Store to throw a <see cref="T:System.NotSupportedException">NotSupportedException</see> if the Store cannot provide this functionality
            </para>
            <para>
            Behaviour of this method with regards to non-existent Graph is up to the implementor, it may create a new empty Graph and apply the updates to that or it may throw an error.  Implementors <strong>should</strong> state in the XML comments for their implementation what behaviour is implemented.
            </para>
            <para>
            Implementers <strong>MUST</strong> allow for either the additions or removals argument to be null
            </para></remarks>
        </member>
        <member name="M:Slp.r2rml4net.Storage.R2RMLStorage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Slp.r2rml4net.Storage.R2RMLStorage.ParentServer">
            <summary>
            Gets the Parent Server on which this store is hosted (if any)
            </summary>
            <value>The parent server.</value>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>For storage backends which support multiple stores this is useful because it provides a way to access all the stores on that backend.  For stores which are standalone they should simply return null</remarks>
        </member>
        <member name="P:Slp.r2rml4net.Storage.R2RMLStorage.DeleteSupported">
            <summary>
            Gets whether the deletion of graphs is supported
            </summary>
            <value><c>true</c> if [delete supported]; otherwise, <c>false</c>.</value>
            <remarks>Some Stores do not support the deletion of Graphs and may as designated in the interface definition throw a <see cref="T:System.NotSupportedException">NotSupportedException</see> if the <strong>DeleteGraph()</strong> method is called.  This property allows for calling code to check in advance whether Deletion of Graphs is supported.</remarks>
        </member>
        <member name="P:Slp.r2rml4net.Storage.R2RMLStorage.IOBehaviour">
            <summary>
            Gets the Save Behaviour the Store uses
            </summary>
            <value>The io behaviour.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Slp.r2rml4net.Storage.R2RMLStorage.IsReadOnly">
            <summary>
            Gets whether the connection with the underlying Store is read-only
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
            <remarks>Any Manager which indicates it is read-only should also return false for the <see cref="P:VDS.RDF.Storage.IStorageCapabilities.UpdateSupported">UpdatedSupported</see> property and should throw a <see cref="T:VDS.RDF.Storage.RdfStorageException">RdfStorageException</see> if the <strong>SaveGraph()</strong> or <strong>UpdateGraph()</strong> methods are called</remarks>
        </member>
        <member name="P:Slp.r2rml4net.Storage.R2RMLStorage.IsReady">
            <summary>
            Gets whether the connection with the underlying Store is ready for use
            </summary>
            <value><c>true</c> if this instance is ready; otherwise, <c>false</c>.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Slp.r2rml4net.Storage.R2RMLStorage.ListGraphsSupported">
            <summary>
            Gets whether the Store supports Listing Graphs
            </summary>
            <value><c>true</c> if [list graphs supported]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.R2RMLStorage.UpdateSupported">
            <summary>
            Gets whether the triple level updates are supported
            </summary>
            <value><c>true</c> if [update supported]; otherwise, <c>false</c>.</value>
            <remarks>Some Stores do not support updates at the Triple level and may as designated in the interface definition throw a <see cref="T:System.NotSupportedException">NotSupportedException</see> if the <strong>UpdateGraph()</strong> method is called.  This property allows for calling code to check in advance whether Updates are supported</remarks>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.ConcatF">
            <summary>
            Concat expression.
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQueryExpression">
            <summary>
            SPARQL query expression
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.ConcatF.parts">
            <summary>
            The parts
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.ConcatF.#ctor(System.Collections.Generic.IEnumerable{Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQueryExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.ConcatF"/> class.
            </summary>
            <param name="parts">The parts.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.ConcatF.Parts">
            <summary>
            Gets the parts.
            </summary>
            <value>The parts.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.ConstantT">
            <summary>
            Constant expression.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.ConstantT.#ctor(VDS.RDF.Nodes.IValuedNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.ConstantT"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.ConstantT.Node">
            <summary>
            Gets the node.
            </summary>
            <value>The node.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.VariableT">
            <summary>
            Variable expression.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.VariableT.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.VariableT"/> class.
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Expression.VariableT.Variable">
            <summary>
            Gets the variable.
            </summary>
            <value>The variable.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp">
            <summary>
            BGP Operator
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQueryPart">
            <summary>
            SPARQL query part
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery">
            <summary>
            SPARQL query
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Utils.IVisitable`1">
            <summary>
            Visitable object for visitor pattern
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Utils.IVisitable`1.Accept(`0,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery.GetInnerQueries">
            <summary>
            Gets the inner queries.
            </summary>
            <returns>The inner queries.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery.ReplaceInnerQuery(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Replaces the inner query.
            </summary>
            <param name="originalQuery">The original query.</param>
            <param name="newQuery">The new query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery.FinalizeAfterTransform">
            <summary>
            Finalizes after transform.
            </summary>
            <returns>The finalized query.</returns>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.predicatePattern">
            <summary>
            The predicate pattern
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.objectPattern">
            <summary>
            The object pattern
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.subjectPattern">
            <summary>
            The subject pattern
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.#ctor(VDS.RDF.Query.Patterns.PatternItem,VDS.RDF.Query.Patterns.PatternItem,VDS.RDF.Query.Patterns.PatternItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp"/> class.
            </summary>
            <param name="subjectPattern">The subject pattern.</param>
            <param name="predicatePattern">The predicate pattern.</param>
            <param name="objectPattern">The object pattern.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.GetInnerQueries">
            <summary>
            Gets the inner queries.
            </summary>
            <returns>The inner queries.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.ReplaceInnerQuery(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Replaces the inner query.
            </summary>
            <param name="q">The q.</param>
            <param name="processed">The processed.</param>
            <exception cref="T:System.Exception">Should not be called, BgpOp has no subqueries</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>BgpOp.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.FinalizeAfterTransform">
            <summary>
            Finalizes after transform.
            </summary>
            <returns>The finalized query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.Accept(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.PredicatePattern">
            <summary>
            Gets the predicate pattern.
            </summary>
            <value>The predicate pattern.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.ObjectPattern">
            <summary>
            Gets the object pattern.
            </summary>
            <value>The object pattern.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.SubjectPattern">
            <summary>
            Gets the subject pattern.
            </summary>
            <value>The subject pattern.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.R2RMLGraphMap">
            <summary>
            Gets or sets the R2RML graph map.
            </summary>
            <value>The R2RML graph map.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.R2RMLObjectMap">
            <summary>
            Gets or sets the R2RML object map.
            </summary>
            <value>The R2RML object map.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.R2RMLSubjectMap">
            <summary>
            Gets or sets the R2RML subject map.
            </summary>
            <value>The R2RML subject map.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.R2RMLTripleDef">
            <summary>
            Gets or sets the R2RML triple definition.
            </summary>
            <value>The R2RML triple definition.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.R2RMLRefObjectMap">
            <summary>
            Gets or sets the R2RML reference object map.
            </summary>
            <value>The R2RML reference object map.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp.R2RMLPredicateMap">
            <summary>
            Gets or sets the R2RML predicate map.
            </summary>
            <value>The R2RML predicate map.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp">
            <summary>
            Bind operator.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp.#ctor(System.String,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQueryExpression,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp"/> class.
            </summary>
            <param name="varName">Name of the variable.</param>
            <param name="expression">The expression.</param>
            <param name="innerQuery">The inner query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp.GetInnerQueries">
            <summary>
            Gets the inner queries.
            </summary>
            <returns>The inner queries.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp.ReplaceInnerQuery(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Replaces the inner query.
            </summary>
            <param name="originalQuery">The original query.</param>
            <param name="newQuery">The new query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp.FinalizeAfterTransform">
            <summary>
            Finalizes after transform.
            </summary>
            <returns>The finalized query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp.Accept(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp.VariableName">
            <summary>
            Gets or sets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp.InnerQuery">
            <summary>
            Gets the inner query.
            </summary>
            <value>The inner query.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.DistinctOp">
            <summary>
            Distinct operator.
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQueryModifier">
            <summary>
            SPARQL query modifier
            </summary>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQueryModifier.InnerQuery">
            <summary>
            Gets the inner query.
            </summary>
            <value>The inner query.</value>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.DistinctOp.#ctor(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.DistinctOp"/> class.
            </summary>
            <param name="innerQuery">The inner query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.DistinctOp.GetInnerQueries">
            <summary>
            Gets the inner queries.
            </summary>
            <returns>The inner queries.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.DistinctOp.ReplaceInnerQuery(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Replaces the inner query.
            </summary>
            <param name="originalQuery">The original query.</param>
            <param name="newQuery">The new query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.DistinctOp.FinalizeAfterTransform">
            <summary>
            Finalizes after transform.
            </summary>
            <returns>The finalized query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.DistinctOp.Accept(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.DistinctOp.InnerQuery">
            <summary>
            Gets the inner query.
            </summary>
            <value>The inner query.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.NoSolutionOp">
            <summary>
            No solution operator.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.NoSolutionOp.GetInnerQueries">
            <summary>
            Gets the inner queries.
            </summary>
            <returns>The inner queries.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.NoSolutionOp.ReplaceInnerQuery(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Replaces the inner query.
            </summary>
            <param name="originalQuery">The original query.</param>
            <param name="newQuery">The new query.</param>
            <exception cref="T:System.Exception">Should not be called, NoSolutionOp has no subqueries</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.NoSolutionOp.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.NoSolutionOp.FinalizeAfterTransform">
            <summary>
            Finalizes after transform.
            </summary>
            <returns>The finalized query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.NoSolutionOp.Accept(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OneEmptySolutionOp">
            <summary>
            One empty solution operator.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OneEmptySolutionOp.GetInnerQueries">
            <summary>
            Gets the inner queries.
            </summary>
            <returns>The inner queries.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OneEmptySolutionOp.ReplaceInnerQuery(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Replaces the inner query.
            </summary>
            <param name="originalQuery">The original query.</param>
            <param name="newQuery">The new query.</param>
            <exception cref="T:System.Exception">Should not be called, OneEmptySolutionOp has no subqueries</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OneEmptySolutionOp.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OneEmptySolutionOp.FinalizeAfterTransform">
            <summary>
            Finalizes after transform.
            </summary>
            <returns>The finalized query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OneEmptySolutionOp.Accept(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp">
            <summary>
            Order by operator.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp.orderings">
            <summary>
            The orderings
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp.#ctor(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp"/> class.
            </summary>
            <param name="innerQuery">The inner query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp.GetInnerQueries">
            <summary>
            Gets the inner queries.
            </summary>
            <returns>The inner queries.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp.ReplaceInnerQuery(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Replaces the inner query.
            </summary>
            <param name="originalQuery">The original query.</param>
            <param name="newQuery">The new query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp.FinalizeAfterTransform">
            <summary>
            Finalizes after transform.
            </summary>
            <returns>The finalized query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp.Accept(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp.AddOrdering(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQueryExpression,System.Boolean)">
            <summary>
            Adds the ordering.
            </summary>
            <param name="sparqlQueryExpression">The sparql query expression.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp.InnerQuery">
            <summary>
            Gets the inner query.
            </summary>
            <value>The inner query.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp.Orderings">
            <summary>
            Gets the orderings.
            </summary>
            <value>The orderings.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByComparator">
            <summary>
            Order by comparator.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByComparator.#ctor(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQueryExpression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByComparator"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByComparator.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByComparator.Descending">
            <summary>
            Gets a value indicating whether this <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByComparator"/> is descending.
            </summary>
            <value><c>true</c> if descending; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ReducedOp">
            <summary>
            Reduced operator.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ReducedOp.#ctor(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ReducedOp"/> class.
            </summary>
            <param name="innerQuery">The inner query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ReducedOp.GetInnerQueries">
            <summary>
            Gets the inner queries.
            </summary>
            <returns>The inner queries.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ReducedOp.ReplaceInnerQuery(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Replaces the inner query.
            </summary>
            <param name="originalQuery">The original query.</param>
            <param name="newQuery">The new query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ReducedOp.FinalizeAfterTransform">
            <summary>
            Finalizes after transform.
            </summary>
            <returns>The finalized query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ReducedOp.Accept(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ReducedOp.InnerQuery">
            <summary>
            Gets the inner query.
            </summary>
            <value>The inner query.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp">
            <summary>
            Slice operator.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp.#ctor(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp"/> class.
            </summary>
            <param name="innerQuery">The inner query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp.GetInnerQueries">
            <summary>
            Gets the inner queries.
            </summary>
            <returns>The inner queries.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp.ReplaceInnerQuery(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Replaces the inner query.
            </summary>
            <param name="originalQuery">The original query.</param>
            <param name="newQuery">The new query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp.FinalizeAfterTransform">
            <summary>
            Finalizes after transform.
            </summary>
            <returns>The finalized query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp.Accept(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp.InnerQuery">
            <summary>
            Gets the inner query.
            </summary>
            <value>The inner query.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
            <value>The limit.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp">
            <summary>
            Union operator.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp.unioned">
            <summary>
            The unioned queries.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp.AddToUnion(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Adds to union.
            </summary>
            <param name="sparqlQuery">The sparql query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp.GetInnerQueries">
            <summary>
            Gets the inner queries.
            </summary>
            <returns>The inner queries.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp.ReplaceInnerQuery(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Replaces the inner query.
            </summary>
            <param name="originalQuery">The original query.</param>
            <param name="newQuery">The new query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp.FinalizeAfterTransform">
            <summary>
            Finalizes after transform.
            </summary>
            <returns>The finalized query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp.Accept(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp">
            <summary>
            Join operator.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp.joined">
            <summary>
            The joined queries.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp.AddToJoin(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Adds to join.
            </summary>
            <param name="sparqlQuery">The sparql query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp.GetInnerQueries">
            <summary>
            Gets the inner queries.
            </summary>
            <returns>The inner queries.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp.ReplaceInnerQuery(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Replaces the inner query.
            </summary>
            <param name="originalQuery">The original query.</param>
            <param name="newQuery">The new query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp.FinalizeAfterTransform">
            <summary>
            Finalizes after transform.
            </summary>
            <returns>The finalized query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp.Accept(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp">
            <summary>
            Select operator.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp.variables">
            <summary>
            The variables
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp.#ctor(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp"/> class.
            </summary>
            <param name="innerQuery">The inner query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp.#ctor(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,System.Collections.Generic.IEnumerable{VDS.RDF.Query.SparqlVariable})">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp"/> class.
            </summary>
            <param name="innerQuery">The inner query.</param>
            <param name="variables">The variables.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp.GetInnerQueries">
            <summary>
            Gets the inner queries.
            </summary>
            <returns>The inner queries.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp.ReplaceInnerQuery(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery)">
            <summary>
            Replaces the inner query.
            </summary>
            <param name="originalQuery">The original query.</param>
            <param name="newQuery">The new query.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp.FinalizeAfterTransform">
            <summary>
            Finalizes after transform.
            </summary>
            <returns>The finalized query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp.Accept(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ISparqlQueryVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp.IsSelectAll">
            <summary>
            Gets a value indicating whether this instance is select all.
            </summary>
            <value><c>true</c> if this instance is select all; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp.Variables">
            <summary>
            Gets the variables.
            </summary>
            <value>The variables.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp.InnerQuery">
            <summary>
            Gets the inner query.
            </summary>
            <value>The inner query.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Query.QueryContext">
            <summary>
            The query context.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Query.QueryContext.usedSqlSourceNames">
            <summary>
            The used SQL source names set.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Query.QueryContext.blankNodesSubjects">
            <summary>
            The blank nodes subjects.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Query.QueryContext.blankNodesObjects">
            <summary>
            The blank nodes objects.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Query.QueryContext.sqlOptimizers">
            <summary>
            The SQL optimizers
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Query.QueryContext.usedVariables">
            <summary>
            The used variables
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Query.QueryContext.#ctor(VDS.RDF.Query.SparqlQuery,Slp.r2rml4net.Storage.Mapping.MappingProcessor,Slp.r2rml4net.Storage.Sql.ISqlDb,VDS.RDF.INodeFactory,Slp.r2rml4net.Storage.Optimization.ISqlAlgebraOptimizerOnTheFly[])">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Query.QueryContext"/> class.
            </summary>
            <param name="query">The query.</param>
            <param name="mapping">The mapping processor.</param>
            <param name="db">The database.</param>
            <param name="nodeFactory">The node factory.</param>
            <param name="sqlOptimizers">The SQL optimizers.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Query.QueryContext.IsAlreadyUsedSqlSourceName(System.String)">
            <summary>
            Determines whether the specified name is already used SQL source name.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the specified name is already used SQL source name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Query.QueryContext.RegisterUsedSqlSourceName(System.String)">
            <summary>
            Registers the name of the used SQL source.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentException">This sql source name already used;name</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Query.QueryContext.GetBlankNodeSubjectForValue(VDS.RDF.INodeFactory,System.Object)">
            <summary>
            Gets the blank node subject for value.
            </summary>
            <param name="factory">The factory.</param>
            <param name="value">The value.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Query.QueryContext.GetBlankNodeObjectForValue(VDS.RDF.INodeFactory,System.Object)">
            <summary>
            Gets the blank node object for value.
            </summary>
            <param name="factory">The factory.</param>
            <param name="value">The value.</param>
            <returns>Node.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Query.QueryContext.OptimizeOnTheFly(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource)">
            <summary>
            Optimizes the algebra on the fly.
            </summary>
            <param name="algebra">The algebra.</param>
            <returns>The optimized algebra.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Query.QueryContext.CreateSparqlVariable">
            <summary>
            Creates the sparql variable.
            </summary>
            <returns>The variable name.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Query.QueryContext.OriginalQuery">
            <summary>
            Gets the original query.
            </summary>
            <value>The original query.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Query.QueryContext.Mapping">
            <summary>
            Gets the mapping.
            </summary>
            <value>The mapping.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Query.QueryContext.NodeFactory">
            <summary>
            Gets the node factory.
            </summary>
            <value>The node factory.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Query.QueryContext.OriginalAlgebra">
            <summary>
            Gets the original algebra.
            </summary>
            <value>The original algebra.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Query.QueryContext.Db">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder">
            <summary>
            SPARQL algebra builder.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder.Process(Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the specified context.
            </summary>
            <param name="context">The query context.</param>
            <returns>The SPARQL query.</returns>
            <exception cref="T:System.Exception">Cannot handle unknown query type</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder.ProcessAsk(Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the ask query.
            </summary>
            <param name="context">The query context.</param>
            <returns>The SPARQL query.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder.ProcessConstruct(Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the construct query.
            </summary>
            <param name="context">The query context.</param>
            <returns>The SPARQL query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder.ProcessDescribe(Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the describe query.
            </summary>
            <param name="context">The query context.</param>
            <returns>The SPARQL query.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder.ProcessSelect(Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the select query.
            </summary>
            <param name="context">The query context.</param>
            <returns>The SPARQL query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder.ProcessAlgebra(VDS.RDF.Query.Algebra.ISparqlAlgebra,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the algebra.
            </summary>
            <param name="originalAlgebra">The original algebra.</param>
            <param name="context">The query context.</param>
            <returns>The SPARQL query.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder.ProcessExpression(VDS.RDF.Query.Expressions.ISparqlExpression,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the expression.
            </summary>
            <param name="sparqlExpression">The SPARQL expression.</param>
            <param name="context">The query context.</param>
            <returns>The query expression.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder.ProcessITriplePatterns(System.Collections.Generic.IEnumerable{VDS.RDF.Query.Patterns.ITriplePattern},Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the triple patterns.
            </summary>
            <param name="triplePatterns">The triple patterns.</param>
            <param name="context">The query context.</param>
            <returns>The SPARQL query.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder.JoinWithCurrentTriplePattern(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Joins the with current triple pattern.
            </summary>
            <param name="current">The current query.</param>
            <param name="query">The other query.</param>
            <param name="context">The query context.</param>
            <returns>The resulting join.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder.ProcessPropertyPath(VDS.RDF.Query.Patterns.PropertyPathPattern,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the property path.
            </summary>
            <param name="pathPattern">The path pattern.</param>
            <param name="context">The query context.</param>
            <returns>The SPARQL query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.SparqlAlgebraBuilder.ProcessPropertyPath(VDS.RDF.Query.Patterns.PatternItem,VDS.RDF.Query.Paths.ISparqlPath,VDS.RDF.Query.Patterns.PatternItem,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the property path.
            </summary>
            <param name="subject">The subject.</param>
            <param name="path">The path.</param>
            <param name="obj">The object.</param>
            <param name="context">The query context.</param>
            <returns>The SPARQL query.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sparql.Utils.FixesExtension">
            <summary>
            Fixes for SPARQL
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sparql.Utils.FixesExtension.Node(VDS.RDF.Query.Expressions.Primary.ConstantTerm)">
            <summary>
            Gets the node for the specified term.
            </summary>
            <param name="term">The term.</param>
            <returns>The node.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition">
            <summary>
            Always false condition.
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.ICondition">
            <summary>
            SQL Condition
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition">
            <summary>
            Always true condition
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition">
            <summary>
            AND condition
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition.conditions">
            <summary>
            The conditions
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition.AddToCondition(Slp.r2rml4net.Storage.Sql.Algebra.ICondition)">
            <summary>
            Adds to condition.
            </summary>
            <param name="cond">The condiditon.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition.Conditions">
            <summary>
            Gets the conditions.
            </summary>
            <value>The conditions.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition">
            <summary>
            Equals condition
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.IExpression,Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition"/> class.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition.RightOperand">
            <summary>
            Gets or sets the right operand.
            </summary>
            <value>The right operand.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition.LeftOperand">
            <summary>
            Gets or sets the left operand.
            </summary>
            <value>The left operand.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition">
            <summary>
            IS NULL condition
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition"/> class.
            </summary>
            <param name="sqlColumn">The SQL column.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition.Column">
            <summary>
            Gets or sets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition">
            <summary>
            NOT Condition
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.ICondition)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition"/> class.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition.InnerCondition">
            <summary>
            Gets the inner condition.
            </summary>
            <value>The inner condition.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition">
            <summary>
            OR Condition
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition.conditions">
            <summary>
            The conditions
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition.AddToCondition(Slp.r2rml4net.Storage.Sql.Algebra.ICondition)">
            <summary>
            Adds to condition.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IConditionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition.Conditions">
            <summary>
            Gets the conditions.
            </summary>
            <value>The conditions.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr">
            <summary>
            CASE expression
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.IExpression">
            <summary>
            SQL Expression
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr.statements">
            <summary>
            The statements
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr.AddStatement(Slp.r2rml4net.Storage.Sql.Algebra.ICondition,Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Adds the statement.
            </summary>
            <param name="condition">The condition.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr.RemoveStatement(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseStatementExpression)">
            <summary>
            Removes the statement.
            </summary>
            <param name="statement">The statement.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr.Statements">
            <summary>
            Gets the statements.
            </summary>
            <value>The statements.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseStatementExpression">
            <summary>
            CASE statement
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseStatementExpression.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.ICondition,Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseStatementExpression"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseStatementExpression.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseStatementExpression.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr">
            <summary>
            COALESCE Expression.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr.expressions">
            <summary>
            The expressions
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr.AddExpression(Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Adds the expression.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr.ReplaceExpression(Slp.r2rml4net.Storage.Sql.Algebra.IExpression,Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Replaces the expression.
            </summary>
            <param name="oldExpr">The old expression.</param>
            <param name="newExpr">The new expression.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr.RemoveExpression(Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Removes the expression.
            </summary>
            <param name="subExpr">The sub expression.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr.Expressions">
            <summary>
            Gets the expressions.
            </summary>
            <value>The expressions.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr">
            <summary>
            Column expression.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr"/> class.
            </summary>
            <param name="column">The column.</param>
            <param name="isIriEscapedValue">if set to <c>true</c> [is iri escaped value].</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr.Column">
            <summary>
            Gets or sets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr.IsIriEscapedValue">
            <summary>
            Gets or sets a value indicating whether this instance is iri escaped value.
            </summary>
            <value><c>true</c> if this instance is iri escaped value; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr">
            <summary>
            CONCAT expression.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr.parts">
            <summary>
            The parts
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr.#ctor(System.Collections.Generic.IEnumerable{Slp.r2rml4net.Storage.Sql.Algebra.IExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr"/> class.
            </summary>
            <param name="parts">The parts.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr.ReplacePart(Slp.r2rml4net.Storage.Sql.Algebra.IExpression,Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Replaces the part.
            </summary>
            <param name="part">The part.</param>
            <param name="newPart">The new part.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr.Parts">
            <summary>
            Gets the parts.
            </summary>
            <value>The parts.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr">
            <summary>
            Constant expression.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr"/> class.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr.SqlString">
            <summary>
            Gets the SQL string.
            </summary>
            <value>The SQL string.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Expression.NullExpr">
            <summary>
            NULL expression.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.NullExpr.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Expression.NullExpr.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Expression.IExpressionVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn">
            <summary>
            SQL Column
            </summary>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.IOriginalSqlColumn">
            <summary>
            SQL Column that is really in the database
            </summary>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.IOriginalSqlColumn.OriginalName">
            <summary>
            Gets the name of the original.
            </summary>
            <value>The name of the original.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource">
            <summary>
            SQL source
            </summary>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource">
            <summary>
            SQL source that is in fact a statement
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource.AddValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Adds the value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource.ReplaceValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Replaces the value binder.
            </summary>
            <param name="oldBinder">The old binder.</param>
            <param name="newBinder">The new binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource.RemoveValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Removes the value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource.ValueBinders">
            <summary>
            Gets the value binders.
            </summary>
            <value>The value binders.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.ISqlOriginalDbSource">
            <summary>
            SQL Source that is actually in the database
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.ISqlOriginalDbSource.GetColumn(System.String)">
            <summary>
            Gets the column.
            </summary>
            <param name="column">The column.</param>
            <returns>ISqlColumn.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ConditionedSource">
            <summary>
            Conditioned source.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ConditionedSource.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.ICondition,Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ConditionedSource"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ConditionedSource.ReplaceCondition(Slp.r2rml4net.Storage.Sql.Algebra.ICondition)">
            <summary>
            Replaces the condition.
            </summary>
            <param name="newCondition">The new condition.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ConditionedSource.Condition">
            <summary>
            Gets the condition.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.ConditionedSource.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource">
            <summary>
            SQL source that does not return anything.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource.valueBinders">
            <summary>
            The value binders
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource.AddValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Adds the value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource.ReplaceValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Replaces the value binder.
            </summary>
            <param name="oldBinder">The old binder.</param>
            <param name="newBinder">The new binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource.RemoveValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Removes the value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource.ValueBinders">
            <summary>
            Gets the value binders.
            </summary>
            <value>The value binders.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource">
            <summary>
            SQL source that returns a single empty row
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource.valueBinders">
            <summary>
            The value binders
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource.AddValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Adds the value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource.ReplaceValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Replaces the value binder.
            </summary>
            <param name="oldBinder">The old binder.</param>
            <param name="newBinder">The new binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource.RemoveValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Removes the value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource.ValueBinders">
            <summary>
            Gets the value binders.
            </summary>
            <value>The value binders.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlExpressionColumn">
            <summary>
            Column containing an expression
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlExpressionColumn.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.IExpression,Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlExpressionColumn"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlExpressionColumn.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlExpressionColumn.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlExpressionColumn.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlOrderByComparator">
            <summary>
            ORDER BY comparator
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlOrderByComparator.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.IExpression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlOrderByComparator"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlOrderByComparator.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlOrderByComparator.Descending">
            <summary>
            Gets a value indicating whether this <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlOrderByComparator"/> is descending.
            </summary>
            <value><c>true</c> if descending; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectColumn">
            <summary>
            SELECT column
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectColumn.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectColumn"/> class.
            </summary>
            <param name="originalColumn">The original column.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectColumn.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectColumn.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectColumn.OriginalColumn">
            <summary>
            Gets the original column.
            </summary>
            <value>The original column.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp">
            <summary>
            SELECT operator.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.columns">
            <summary>
            The columns
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.joinSources">
            <summary>
            The join sources
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.leftOuterJoinSources">
            <summary>
            The left outer join sources
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.conditions">
            <summary>
            The conditions
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.orderings">
            <summary>
            The orderings
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.originalSource">
            <summary>
            The original source
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp"/> class.
            </summary>
            <param name="originalSource">The original source.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.GetSelectColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Gets the select column.
            </summary>
            <param name="sourceColumn">The source column.</param>
            <returns>The column.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.GetExpressionColumn(Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Gets the expression column.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The column.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.AddCondition(Slp.r2rml4net.Storage.Sql.Algebra.ICondition)">
            <summary>
            Adds the condition.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.RemoveColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Removes the column.
            </summary>
            <param name="col">The col.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.ReplaceCondition(Slp.r2rml4net.Storage.Sql.Algebra.ICondition,Slp.r2rml4net.Storage.Sql.Algebra.ICondition)">
            <summary>
            Replaces the condition.
            </summary>
            <param name="cond">The cond.</param>
            <param name="processedCondition">The processed condition.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.RemoveCondition(Slp.r2rml4net.Storage.Sql.Algebra.ICondition)">
            <summary>
            Removes the condition.
            </summary>
            <param name="cond">The cond.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.ClearConditions">
            <summary>
            Clears the conditions.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.valueBinders">
            <summary>
            The value binders
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.AddValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Adds the value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.AddJoinedSource(Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource,Slp.r2rml4net.Storage.Sql.Algebra.ICondition,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Adds the joined source.
            </summary>
            <param name="sqlSource">The SQL source.</param>
            <param name="condition">The condition.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.AddLeftOuterJoinedSource(Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource,Slp.r2rml4net.Storage.Sql.Algebra.ICondition,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Adds the left outer joined source.
            </summary>
            <param name="sqlSource">The SQL source.</param>
            <param name="condition">The condition.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.ReplaceValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Replaces the value binder.
            </summary>
            <param name="oldBinder">The old binder.</param>
            <param name="newBinder">The new binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.RemoveValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Removes the value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.InsertOrdering(Slp.r2rml4net.Storage.Sql.Algebra.IExpression,System.Boolean)">
            <summary>
            Inserts the ordering.
            </summary>
            <param name="expression">The expression.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.OriginalSource">
            <summary>
            Gets the original source (FROM).
            </summary>
            <value>The original source.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.JoinSources">
            <summary>
            Gets the join sources (INNER JOIN).
            </summary>
            <value>The join sources.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.LeftOuterJoinSources">
            <summary>
            Gets the left outer join sources (LEFT OUTER JOIN).
            </summary>
            <value>The left outer join sources.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.Conditions">
            <summary>
            Gets the conditions.
            </summary>
            <value>The conditions.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.Orderings">
            <summary>
            Gets the orderings.
            </summary>
            <value>The orderings.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
            <value>The limit.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.ValueBinders">
            <summary>
            Gets the value binders.
            </summary>
            <value>The value binders.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.IsDistinct">
            <summary>
            Gets or sets a value indicating whether this instance is distinct.
            </summary>
            <value><c>true</c> if this instance is distinct; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp.IsReduced">
            <summary>
            Gets or sets a value indicating whether this instance is reduced.
            </summary>
            <value><c>true</c> if this instance is reduced; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionColumn">
            <summary>
            UNION column.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionColumn.originalColumns">
            <summary>
            The original columns
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionColumn.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionColumn"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionColumn.AddColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionColumn.RemoveColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Removes the column.
            </summary>
            <param name="ccol">The column.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionColumn.OriginalColumns">
            <summary>
            Gets the original columns.
            </summary>
            <value>The original columns.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionColumn.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionColumn.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp">
            <summary>
            UNION operator.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.columns">
            <summary>
            The columns
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.sources">
            <summary>
            The sources
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.valueBinders">
            <summary>
            The value binders
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.AddSource(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp)">
            <summary>
            Adds the source.
            </summary>
            <param name="select">The select.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.AddValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Adds the value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.ReplaceValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Replaces the value binder.
            </summary>
            <param name="oldBinder">The old binder.</param>
            <param name="newBinder">The new binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.RemoveValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Removes the value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.GetUnionedColumn">
            <summary>
            Gets the unioned column.
            </summary>
            <returns>SqlUnionColumn.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.RemoveColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Removes the column.
            </summary>
            <param name="col">The column.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.RemoveSource(Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource)">
            <summary>
            Removes the source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.CaseColumn">
            <summary>
            Gets the case column.
            </summary>
            <value>The case column.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.ValueBinders">
            <summary>
            Gets the value binders.
            </summary>
            <value>The value binders.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.Sources">
            <summary>
            Gets the sources.
            </summary>
            <value>The sources.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp.IsReduced">
            <summary>
            Gets or sets a value indicating whether this instance is reduced.
            </summary>
            <value><c>true</c> if this instance is reduced; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTableColumn">
            <summary>
            SQL table column.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTableColumn.#ctor(System.String,Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTableColumn"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTableColumn.OriginalName">
            <summary>
            Gets the name of the original.
            </summary>
            <value>The name of the original.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTableColumn.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTableColumn.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement">
            <summary>
            SQL string statement
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement.columns">
            <summary>
            The columns
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement.GetColumn(System.String)">
            <summary>
            Gets the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>ISqlColumn.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement.RemoveColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Removes the column.
            </summary>
            <param name="col">The col.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement.SqlQuery">
            <summary>
            Gets the SQL query.
            </summary>
            <value>The SQL query.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension">
            <summary>
            Extension for getting all referenced columns
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.visitor">
            <summary>
            The visitor
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumns(Slp.r2rml4net.Storage.Sql.Algebra.ICondition)">
            <summary>
            Gets all referenced columns.
            </summary>
            <param name="condition">The condition.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumns(Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Gets all referenced columns.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor">
            <summary>
            The visitor that gets all referenced columns
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="collateExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="caseExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.NullExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="nullExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>The referenced columns.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Slp#r2rml4net#Storage#Sql#Algebra#Condition#IConditionVisitor#Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Slp#r2rml4net#Storage#Sql#Algebra#Condition#IConditionVisitor#Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Slp#r2rml4net#Storage#Sql#Algebra#Condition#IConditionVisitor#Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Slp#r2rml4net#Storage#Sql#Algebra#Condition#IConditionVisitor#Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Slp#r2rml4net#Storage#Sql#Algebra#Condition#IConditionVisitor#Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Slp#r2rml4net#Storage#Sql#Algebra#Condition#IConditionVisitor#Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Slp#r2rml4net#Storage#Sql#Algebra#Expression#IExpressionVisitor#Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Slp#r2rml4net#Storage#Sql#Algebra#Expression#IExpressionVisitor#Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Slp#r2rml4net#Storage#Sql#Algebra#Expression#IExpressionVisitor#Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Slp#r2rml4net#Storage#Sql#Algebra#Expression#IExpressionVisitor#Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.NullExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The data.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Slp#r2rml4net#Storage#Sql#Algebra#Expression#IExpressionVisitor#Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The data.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.GetAllReferencedColumnsExtension.GetAllReferencedColumnsVisitor.Slp#r2rml4net#Storage#Sql#Algebra#Expression#IExpressionVisitor#Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The data.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Utils.OperatorInfoExtension">
            <summary>
            Extension that provide additional operator info
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.OperatorInfoExtension.CanBeMergedTo(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp)">
            <summary>
            Determines whether the join operator can be merged with another one.
            </summary>
            <param name="joinOp">The join op.</param>
            <returns><c>true</c> if the join operator can be merged with another one; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.OperatorInfoExtension.IsMergeableTo(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp)">
            <summary>
            Determines whether the join operator can be merged with another one.
            </summary>
            <param name="second">The operator that will be merged to.</param>
            <param name="first">The operator that should merge to the other one.</param>
            <returns><c>true</c> if the join operator can be merged with another one.; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension">
            <summary>
            Extension for replacing column reference
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReference(Slp.r2rml4net.Storage.Sql.Algebra.ICondition,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Replaces the column reference.
            </summary>
            <param name="condition">The condition.</param>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReference(Slp.r2rml4net.Storage.Sql.Algebra.IExpression,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Replaces the column reference.
            </summary>
            <param name="expression">The expression.</param>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor">
            <summary>
            Visitor for replacing column reference
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.oldColumn">
            <summary>
            The old column
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.newColumn">
            <summary>
            The new column
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor"/> class.
            </summary>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.NullExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="nullExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="collateExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.ReplaceColumnReferenceExtension.ReplaceColumnReferenceVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="caseExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension">
            <summary>
            Static evaluation of the expressions
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticEvaluation(Slp.r2rml4net.Storage.Sql.Algebra.IExpression,Slp.r2rml4net.Storage.Sql.IQueryResultRow)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The data.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticEvaluation(Slp.r2rml4net.Storage.Sql.Algebra.ICondition,Slp.r2rml4net.Storage.Sql.IQueryResultRow)">
            <summary>
            Evaluates the condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The data.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor">
            <summary>
            Visitor to evaluate
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.NullExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="nullExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="collateExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Utils.StaticExpressionEvaluationExtension.StaticExpressionEvaluationVisitor.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="caseExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.BlankValueBinder">
            <summary>
            Value binder that never returns a value
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder">
            <summary>
            Base value binder
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder.LoadNode(VDS.RDF.INodeFactory,Slp.r2rml4net.Storage.Sql.IQueryResultRow,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Loads the node value.
            </summary>
            <param name="factory">The factory.</param>
            <param name="row">The db row.</param>
            <param name="context">The query context.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder.ReplaceAssignedColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Replaces the assigned column.
            </summary>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder.VariableName">
            <summary>
            Gets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder.AssignedColumns">
            <summary>
            Gets the assigned columns.
            </summary>
            <value>The assigned columns.</value>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.BlankValueBinder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Binders.BlankValueBinder"/> class.
            </summary>
            <param name="variableName">Name of the variable.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.BlankValueBinder.LoadNode(VDS.RDF.INodeFactory,Slp.r2rml4net.Storage.Sql.IQueryResultRow,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Loads the node value.
            </summary>
            <param name="factory">The factory.</param>
            <param name="row">The db row.</param>
            <param name="context">The query context.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.BlankValueBinder.ReplaceAssignedColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Replaces the assigned column.
            </summary>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.BlankValueBinder.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.BlankValueBinder.Accept(Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.BlankValueBinder.VariableName">
            <summary>
            Gets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.BlankValueBinder.AssignedColumns">
            <summary>
            Gets the assigned columns.
            </summary>
            <value>The assigned columns.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder">
            <summary>
            CASE value binder.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder.statements">
            <summary>
            The statements
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder"/> class.
            </summary>
            <param name="variableName">Name of the variable.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder.AddValueBinder(Slp.r2rml4net.Storage.Sql.Algebra.ICondition,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Adds the value binder.
            </summary>
            <param name="condition">The condition.</param>
            <param name="valueBinder">The value binder.</param>
            <exception cref="T:System.Exception">Cannot add value binder to case value binder with different variable name</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder.LoadNode(VDS.RDF.INodeFactory,Slp.r2rml4net.Storage.Sql.IQueryResultRow,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Loads the node value.
            </summary>
            <param name="factory">The factory.</param>
            <param name="row">The db row.</param>
            <param name="context">The query context.</param>
            <returns>The node.</returns>
            <exception cref="T:System.Exception">Every row should be in some case</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder.ReplaceAssignedColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Replaces the assigned column.
            </summary>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder.Accept(Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder.RemoveStatement(Slp.r2rml4net.Storage.Sql.Binders.CaseStatementBinder)">
            <summary>
            Removes the statement.
            </summary>
            <param name="caseStatement">The case statement.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder.VariableName">
            <summary>
            Gets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder.AssignedColumns">
            <summary>
            Gets the assigned columns.
            </summary>
            <value>The assigned columns.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.CaseValueBinder.Statements">
            <summary>
            Gets the statements.
            </summary>
            <value>The statements.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.CaseStatementBinder">
            <summary>
            CASE statement in value binder
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CaseStatementBinder.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.ICondition,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Binders.CaseStatementBinder"/> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="valueBinder">The value binder.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.CaseStatementBinder.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.CaseStatementBinder.ValueBinder">
            <summary>
            Gets or sets the value binder.
            </summary>
            <value>The value binder.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.ExpressionValueBinder">
            <summary>
            SQL expression value binder.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ExpressionValueBinder.#ctor(System.String,Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Binders.ExpressionValueBinder"/> class.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ExpressionValueBinder.LoadNode(VDS.RDF.INodeFactory,Slp.r2rml4net.Storage.Sql.IQueryResultRow,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Loads the node value.
            </summary>
            <param name="factory">The factory.</param>
            <param name="row">The db row.</param>
            <param name="context">The query context.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ExpressionValueBinder.ReplaceAssignedColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Replaces the assigned column.
            </summary>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ExpressionValueBinder.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ExpressionValueBinder.Accept(Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.ExpressionValueBinder.VariableName">
            <summary>
            Gets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.ExpressionValueBinder.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.ExpressionValueBinder.AssignedColumns">
            <summary>
            Gets the assigned columns.
            </summary>
            <value>The assigned columns.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder">
            <summary>
            COALESCE value binder.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.binders">
            <summary>
            The binders
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder"/> class from being created.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.#ctor(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder"/> class.
            </summary>
            <param name="originalValueBinder">The original value binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.AddValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Adds the value binder.
            </summary>
            <param name="valueBinder">The value binder.</param>
            <exception cref="T:System.Exception">Cannot collate value binders for different variables</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.LoadNode(VDS.RDF.INodeFactory,Slp.r2rml4net.Storage.Sql.IQueryResultRow,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Loads the node value.
            </summary>
            <param name="factory">The factory.</param>
            <param name="row">The db row.</param>
            <param name="context">The query context.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.ReplaceAssignedColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Replaces the assigned column.
            </summary>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.Accept(Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.ReplaceValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Replaces the value binder.
            </summary>
            <param name="binder">The binder.</param>
            <param name="newBinder">The new binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.RemoveValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Removes the value binder.
            </summary>
            <param name="binder">The binder.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.VariableName">
            <summary>
            Gets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.AssignedColumns">
            <summary>
            Gets the assigned columns.
            </summary>
            <value>The assigned columns.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.CoalesceValueBinder.InnerBinders">
            <summary>
            Gets the inner binders.
            </summary>
            <value>The inner binders.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder">
            <summary>
            SQL side value binder.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder.#ctor(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder"/> class.
            </summary>
            <param name="column">The column.</param>
            <param name="originalBinder">The original binder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder.LoadNode(VDS.RDF.INodeFactory,Slp.r2rml4net.Storage.Sql.IQueryResultRow,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Loads the node value.
            </summary>
            <param name="factory">The factory.</param>
            <param name="row">The db row.</param>
            <param name="context">The query context.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder.ReplaceAssignedColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Replaces the assigned column.
            </summary>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder.Accept(Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder.Column">
            <summary>
            Gets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder.VariableName">
            <summary>
            Gets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder.AssignedColumns">
            <summary>
            Gets the assigned columns.
            </summary>
            <value>The assigned columns.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.SqlSideValueBinder.OriginalBinder">
            <summary>
            Gets the original binder.
            </summary>
            <value>The original binder.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor">
            <summary>
            Template processor
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.TemplateReplaceRegex">
            <summary>
            The template replace regex
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.GetColumnsFromTemplate(System.String)">
            <summary>
            Gets the columns from template.
            </summary>
            <param name="template">The template.</param>
            <returns>Columns used in template.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.ParseTemplate(System.String)">
            <summary>
            Parses the template.
            </summary>
            <param name="template">The template.</param>
            <returns>The template parts.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.ColumnTemplatePart">
            <summary>
            Template column part
            </summary>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.ITemplatePart">
            <summary>
            Template part
            </summary>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.ITemplatePart.IsColumn">
            <summary>
            Gets a value indicating whether this instance is column.
            </summary>
            <value><c>true</c> if this instance is column; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.ITemplatePart.IsText">
            <summary>
            Gets a value indicating whether this instance is text.
            </summary>
            <value><c>true</c> if this instance is text; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.ITemplatePart.Column">
            <summary>
            Gets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.ITemplatePart.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.ColumnTemplatePart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.ColumnTemplatePart"/> class.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.ColumnTemplatePart.Column">
            <summary>
            Gets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.ColumnTemplatePart.IsColumn">
            <summary>
            Gets a value indicating whether this instance is column.
            </summary>
            <value><c>true</c> if this instance is column; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.ColumnTemplatePart.IsText">
            <summary>
            Gets a value indicating whether this instance is text.
            </summary>
            <value><c>true</c> if this instance is text; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.ColumnTemplatePart.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
            <exception cref="T:System.Exception">Asked for text on ColumnTemplatePart</exception>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.TextTemplatePart">
            <summary>
            Template text part
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.TextTemplatePart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.TextTemplatePart"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.TextTemplatePart.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.TextTemplatePart.IsColumn">
            <summary>
            Gets a value indicating whether this instance is column.
            </summary>
            <value><c>true</c> if this instance is column; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.TextTemplatePart.IsText">
            <summary>
            Gets a value indicating whether this instance is text.
            </summary>
            <value><c>true</c> if this instance is text; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor.TextTemplatePart.Column">
            <summary>
            Gets the column.
            </summary>
            <value>The column.</value>
            <exception cref="T:System.Exception">Asked for column on TextTemplatePart</exception>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder">
            <summary>
            The basic value binder
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.r2rmlMap">
            <summary>
            The R2RML map
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.columns">
            <summary>
            The columns
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.templateProcessor">
            <summary>
            The template processor
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.templateParts">
            <summary>
            The template parts
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder"/> class from being publicly created.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.#ctor(TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder"/> class.
            </summary>
            <param name="r2rmlMap">The R2RML map.</param>
            <param name="templateProcessor">The template processor.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.#ctor(System.String,TCode.r2rml4net.Mapping.ITermMap,Slp.r2rml4net.Storage.Sql.Binders.TemplateProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder"/> class.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="r2rmlMap">The R2RML map.</param>
            <param name="templateProcessor">The template processor.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.SetColumn(System.String,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Sets the column.
            </summary>
            <param name="column">The column.</param>
            <param name="sqlColumn">The SQL column.</param>
            <exception cref="T:System.Exception">Cannot set column that is not requested for evaluation</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.GetColumn(System.String)">
            <summary>
            Gets the column.
            </summary>
            <param name="column">The column.</param>
            <returns>ISqlColumn.</returns>
            <exception cref="T:System.Exception">Cannot get column that is not requested for evaluation</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.ReplaceAssignedColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Replaces the assigned column.
            </summary>
            <param name="oldColumn">The old column.</param>
            <param name="newColumn">The new column.</param>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.loadNodeFunc">
            <summary>
            The load node function
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.LoadNode(VDS.RDF.INodeFactory,Slp.r2rml4net.Storage.Sql.IQueryResultRow,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Loads the node value.
            </summary>
            <param name="factory">The factory.</param>
            <param name="row">The db row.</param>
            <param name="context">The query context.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.GenerateLoadNodeFunc">
            <summary>
            Generates the load node function.
            </summary>
            <returns>Generated function.</returns>
            <exception cref="T:System.Exception">Term map must be either constant, column or template valued</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.GenerateLoadNodeFuncFromTemplate">
            <summary>
            Generates the load node function from template.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.GenerateReplaceColumnReferencesFunc(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression,System.Boolean)">
            <summary>
            Generates the replace column references function.
            </summary>
            <param name="nodeFactory">The node factory.</param>
            <param name="row">The row.</param>
            <param name="context">The context.</param>
            <param name="escape">if set to <c>true</c> the value should be escaped.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.GenerateReplaceColumnReferenceFunc(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression,Slp.r2rml4net.Storage.Sql.Binders.ITemplatePart,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,System.Boolean)">
            <summary>
            Generates the replace column reference function.
            </summary>
            <param name="nodeFactory">The node factory.</param>
            <param name="row">The row.</param>
            <param name="context">The context.</param>
            <param name="part">The part.</param>
            <param name="column">The column.</param>
            <param name="escape">if set to <c>true</c> the value should be escaped.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.GenerateLoadNodeFuncFromConstant">
            <summary>
            Generates the load node function from constant.
            </summary>
            <exception cref="T:System.Exception">
            Object map's value must be IRI or literal.
            or
            Constant must be uri valued or an object map
            </exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.GenerateTermForValueFunc(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Generates the term for value function.
            </summary>
            <param name="factory">The factory.</param>
            <param name="value">The value.</param>
            <param name="context">The query context.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.GenerateBlankNodeForValueFunc(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Generates the blank node for value function.
            </summary>
            <param name="factory">The factory.</param>
            <param name="value">The value.</param>
            <param name="context">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.GenerateTermForLiteralFunc(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Generates the term for literal function.
            </summary>
            <param name="factory">The factory.</param>
            <param name="value">The value.</param>
            <param name="context">The query context.</param>
            <exception cref="T:System.Exception">
            Term map cannot be of term type literal
            or
            Literal term map cannot have both language tag and datatype set
            </exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.GenerateUriTermForValue(System.String,VDS.RDF.INodeFactory,Slp.r2rml4net.Storage.Query.QueryContext,System.Uri)">
            <summary>
            Generates the URI term for value.
            </summary>
            <param name="value">The value.</param>
            <param name="factory">The factory.</param>
            <param name="context">The context.</param>
            <param name="baseUri">The base URI.</param>
            <exception cref="T:System.Exception">
            Now the uri must be absolute
            or
            </exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.ConstructAbsoluteUri(VDS.RDF.INodeFactory,System.String,System.Uri,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Constructs the absolute URI.
            </summary>
            <param name="factory">The factory.</param>
            <param name="relativePart">The relative part.</param>
            <param name="baseUri">The base URI.</param>
            <param name="context">The context.</param>
            <returns>Uri.</returns>
            <exception cref="T:System.Exception">The relative IRI cannot contain any . or .. parts</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.AssertNoIllegalCharacters(System.Uri)">
            <summary>
            Asserts the no illegal characters.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.GenerateLoadNodeFuncFromColumn">
            <summary>
            Generates the load node function from column.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.Accept(Slp.r2rml4net.Storage.Sql.Binders.IValueBinderVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.VariableName">
            <summary>
            Gets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.R2RMLMap">
            <summary>
            Gets the R2RML map.
            </summary>
            <value>The R2RML map.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.TemplateProcessor">
            <summary>
            Gets the template processor.
            </summary>
            <value>The template processor.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.NeededColumns">
            <summary>
            Gets the needed columns.
            </summary>
            <value>The needed columns.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Binders.ValueBinder.AssignedColumns">
            <summary>
            Gets the assigned columns.
            </summary>
            <value>The assigned columns.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.ConditionBuilder">
            <summary>
            Condition builder.
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.ConditionBuilder.expressionBuilder">
            <summary>
            The expression builder
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.#ctor(Slp.r2rml4net.Storage.Sql.ExpressionBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.ConditionBuilder"/> class.
            </summary>
            <param name="expressionBuilder">The expression builder.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.CreateEqualsCondition(Slp.r2rml4net.Storage.Query.QueryContext,VDS.RDF.INode,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Creates the equals condition.
            </summary>
            <param name="context">The query context.</param>
            <param name="node">The node.</param>
            <param name="valueBinder">The value binder.</param>
            <returns>The created condition.</returns>
            <exception cref="T:System.NotImplementedException">Not supported value binder in method CreateEqualsCondition</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.CreateEqualsCondition(Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Creates the equals condition.
            </summary>
            <param name="context">The query context.</param>
            <param name="firstValBinder">The first value binder.</param>
            <param name="secondValBinder">The second value binder.</param>
            <returns>The created condition.</returns>
            <exception cref="T:System.Exception">Unknown value binder</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.CreateEqualsCondition(Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Creates the equals condition.
            </summary>
            <param name="context">The query context.</param>
            <param name="column">The column.</param>
            <param name="expression">The expression.</param>
            <returns>The created condition.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.CreateEqualsCondition(Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Creates the equals condition.
            </summary>
            <param name="context">The query context.</param>
            <param name="firstCol">The first column.</param>
            <param name="secondCol">The second column.</param>
            <returns>The created condition.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.CreateAlwaysTrueCondition(Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Creates the always true condition.
            </summary>
            <param name="context">The query context.</param>
            <returns>The created condition.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.CreateAlwaysFalseCondition(Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Creates the always false condition.
            </summary>
            <param name="context">The query context.</param>
            <returns>The created condition.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.CreateAndCondition(Slp.r2rml4net.Storage.Query.QueryContext,System.Collections.Generic.IEnumerable{Slp.r2rml4net.Storage.Sql.Algebra.ICondition})">
            <summary>
            Creates the and condition.
            </summary>
            <param name="context">The querz context.</param>
            <param name="conditions">The conditions.</param>
            <returns>The created condition.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.CreateJoinEqualsCondition(Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Creates the join equals condition.
            </summary>
            <param name="context">The query context.</param>
            <param name="firstValBinder">The first value binder.</param>
            <param name="secondValBinder">The second value binder.</param>
            <returns>The created condition.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.CreateIsNullCondition(Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Creates the is null condition.
            </summary>
            <param name="context">The query context.</param>
            <param name="valueBinder">The value binder.</param>
            <returns>The created condition.</returns>
            <exception cref="T:System.Exception">Unknown value binder</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.CreateIsNullCondition(Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.IExpression)">
            <summary>
            Creates the is null condition.
            </summary>
            <param name="context">The query context.</param>
            <param name="expression">The expression.</param>
            <returns>The created condition.</returns>
            <exception cref="T:System.Exception">Not implemented expression</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.CreateIsNullCondition(Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Creates the is null condition.
            </summary>
            <param name="context">The query context.</param>
            <param name="sqlColumn">The SQL column.</param>
            <returns>The created condition.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ConditionBuilder.CreateIsNotNullCondition(Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Creates the is not null condition.
            </summary>
            <param name="context">The query context.</param>
            <param name="sqlColumn">The SQL column.</param>
            <returns>The created condition.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.ExpressionBuilder">
            <summary>
            Builder for SQL expression
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ExpressionBuilder.CreateExpression(Slp.r2rml4net.Storage.Query.QueryContext,VDS.RDF.INode)">
            <summary>
            Creates the expression.
            </summary>
            <param name="context">The query context.</param>
            <param name="node">The node.</param>
            <returns>The created expression.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ExpressionBuilder.CreateExpression(Slp.r2rml4net.Storage.Query.QueryContext,VDS.RDF.UriNode)">
            <summary>
            Creates the expression.
            </summary>
            <param name="context">The query context.</param>
            <param name="node">The URI node.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ExpressionBuilder.CreateExpression(Slp.r2rml4net.Storage.Query.QueryContext,VDS.RDF.LiteralNode)">
            <summary>
            Creates the expression.
            </summary>
            <param name="context">The query context.</param>
            <param name="node">The literal node.</param>
            <returns>The created expression.</returns>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ExpressionBuilder.CreateExpression(Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Binders.ValueBinder)">
            <summary>
            Creates the expression.
            </summary>
            <param name="context">The query context.</param>
            <param name="valueBinder">The value binder.</param>
            <returns>The created expression.</returns>
            <exception cref="T:System.Exception">
            Object map's value must be IRI or literal.
            or
            Unknonwn constant valued term map
            or
            Template part must be column or text part
            or
            Mapping can be only constant, column or template valued
            </exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ExpressionBuilder.CreateColumnExpression(Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,System.Boolean)">
            <summary>
            Creates the column expression.
            </summary>
            <param name="context">The query context.</param>
            <param name="sqlColumn">The SQL column.</param>
            <param name="isIriEscaped">if set to <c>true</c> the value should be iri escaped.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ExpressionBuilder.CreateExpression(Slp.r2rml4net.Storage.Query.QueryContext,System.Int32)">
            <summary>
            Creates the expression.
            </summary>
            <param name="context">The query context.</param>
            <param name="number">The number.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ExpressionBuilder.CreateOrderByExpression(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQueryExpression,Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Creates the order by expression.
            </summary>
            <param name="sparqlQueryExpression">The sparql query expression.</param>
            <param name="select">The select operator.</param>
            <param name="context">The query context.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ExpressionBuilder.CreateExpression(Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder)">
            <summary>
            Creates the expression.
            </summary>
            <param name="context">The query context.</param>
            <param name="binder">The value binder.</param>
            <returns>The created expression.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ExpressionBuilder.CreateExpressionForSqlSideValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Creates the expression for SQL side value binder.
            </summary>
            <param name="binder">The value binder.</param>
            <param name="context">The query context.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ExpressionBuilder.ConvertExpression(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQueryExpression,System.Collections.Generic.ICollection{Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder},Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Converts the expression.
            </summary>
            <param name="sparqlQueryExpression">The sparql query expression.</param>
            <param name="valueBinders">The value binders.</param>
            <param name="context">The query context.</param>
            <returns>The created expression.</returns>
            <exception cref="T:System.Exception">Variable not found</exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ExpressionBuilder.ConvertExpression(VDS.RDF.Nodes.IValuedNode,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Converts the expression.
            </summary>
            <param name="node">The node.</param>
            <param name="context">The query context.</param>
            <returns>The created expression.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.IQueryResultReader">
            <summary>
            The SQL result reader
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.IQueryResultReader.Read">
            <summary>
            Reads the current row and moves to next one.
            </summary>
            <returns>Readed row, <c>null</c> if there is no row</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.IQueryResultReader.HasNextRow">
            <summary>
            Gets a value indicating whether this instance has next row.
            </summary>
            <value><c>true</c> if this instance has next row; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.IQueryResultRow">
            <summary>
            Single row in SQL result
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.IQueryResultRow.GetColumn(System.String)">
            <summary>
            Gets the column.
            </summary>
            <param name="name">The column name.</param>
            <returns>The column.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.IQueryResultRow.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.IQueryResultColumn">
            <summary>
            Single cell in SQL result
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.IQueryResultColumn.GetBooleanValue">
            <summary>
            Gets the boolean value.
            </summary>
            <returns><c>true</c> if the value is true, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.IQueryResultColumn.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.IQueryResultColumn.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.ISqlDb">
            <summary>
            Interface for database vendor
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ISqlDb.GenerateQuery(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Generates the query.
            </summary>
            <param name="sqlAlgebra">The SQL algebra.</param>
            <param name="context">The query context.</param>
            <returns>The SQL query</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ISqlDb.ExecuteQuery(System.String,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Executes the query.
            </summary>
            <param name="query">The query.</param>
            <param name="context">The query context.</param>
            <returns>The query result reader.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.ISqlDb.CanBeUnioned(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Determines whether the specified columns can be unioned.
            </summary>
            <param name="column">The column.</param>
            <param name="other">The other column.</param>
            <returns><c>true</c> if the specified columns can be unioned; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder">
            <summary>
            SQL algebra builder
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.conditionBuilder">
            <summary>
            The condition builder
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.templateProcessor">
            <summary>
            The template processor
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.expressionBuilder">
            <summary>
            The expression builder
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.Process(Slp.r2rml4net.Storage.Sparql.Algebra.ISparqlQuery,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the specified algebra.
            </summary>
            <param name="algebra">The algebra.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,System.Object)">
            <summary>
            Visits the specified BGP operator.
            </summary>
            <param name="bgpOp">The BGP operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.JoinOp,System.Object)">
            <summary>
            Visits the specified join operator.
            </summary>
            <param name="joinOp">The join operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OneEmptySolutionOp,System.Object)">
            <summary>
            Visits the specified one empty solution operator.
            </summary>
            <param name="oneEmptySolutionOp">The one empty solution operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.UnionOp,System.Object)">
            <summary>
            Visits the specified union operator.
            </summary>
            <param name="unionOp">The union operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.GetUnionedColumn(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Gets the unioned column.
            </summary>
            <param name="sqlUnion">The SQL union.</param>
            <param name="neededColumn">The needed column.</param>
            <param name="context">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.NoSolutionOp,System.Object)">
            <summary>
            Visits the specified no solution operator.
            </summary>
            <param name="noSolutionOp">The no solution operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SliceOp,System.Object)">
            <summary>
            Visits the specified slice operator.
            </summary>
            <param name="sliceOp">The slice operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.OrderByOp,System.Object)">
            <summary>
            Visits the specified order by operator.
            </summary>
            <param name="orderByOp">The order by operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.DistinctOp,System.Object)">
            <summary>
            Visits the specified distinct operator.
            </summary>
            <param name="distinctOp">The distinct operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.ReducedOp,System.Object)">
            <summary>
            Visits the specified reduced operator.
            </summary>
            <param name="reducedOp">The reduced operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BindOp,System.Object)">
            <summary>
            Visits the specified bind operator.
            </summary>
            <param name="bindOp">The bind operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.Visit(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.SelectOp,System.Object)">
            <summary>
            Visits the specified select operator.
            </summary>
            <param name="selectOp">The select operator.</param>
            <param name="data">The data.</param>
            <returns>The returned value.</returns>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.ProcessBgpSource(TCode.r2rml4net.Mapping.ITriplesMap,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the BGP source.
            </summary>
            <param name="triplesMap">The triples map.</param>
            <param name="context">The query context.</param>
            <exception cref="T:System.Exception">Unknown source of bgp</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.ProcessBgpObject(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Sql.Algebra.ISqlOriginalDbSource)">
            <summary>
            Processes the BGP object.
            </summary>
            <param name="bgpOp">The BGP operator.</param>
            <param name="context">The query context.</param>
            <param name="select">The select.</param>
            <param name="childSource">The child source.</param>
            <exception cref="T:System.Exception">BgpOp must have object or ref object map</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.ProcessBgpPredicate(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Sql.Algebra.ISqlOriginalDbSource)">
            <summary>
            Processes the BGP predicate.
            </summary>
            <param name="bgpOp">The BGP op.</param>
            <param name="context">The context.</param>
            <param name="select">The select.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.ProcessBgpSubject(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Sql.Algebra.ISqlOriginalDbSource)">
            <summary>
            Processes the BGP subject.
            </summary>
            <param name="bgpOp">The BGP op.</param>
            <param name="context">The context.</param>
            <param name="select">The select.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.ProcessBgpPattern(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Sql.Algebra.ISqlOriginalDbSource,VDS.RDF.Query.Patterns.PatternItem,TCode.r2rml4net.Mapping.ITermMap)">
            <summary>
            Processes the BGP pattern.
            </summary>
            <param name="bgpOp">The BGP op.</param>
            <param name="context">The context.</param>
            <param name="select">The select.</param>
            <param name="source">The source.</param>
            <param name="pattern">The pattern.</param>
            <param name="r2rmlMap">The R2RML map.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.ProcessBgpCondition(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Sql.Algebra.ISqlOriginalDbSource,VDS.RDF.INode,TCode.r2rml4net.Mapping.ITermMap)">
            <summary>
            Processes the BGP condition.
            </summary>
            <param name="bgpOp">The BGP operator.</param>
            <param name="context">The context.</param>
            <param name="select">The select.</param>
            <param name="source">The source.</param>
            <param name="node">The node.</param>
            <param name="r2rmlMap">The R2RML map.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.ProcessBgpVariable(Slp.r2rml4net.Storage.Sparql.Algebra.Operator.BgpOp,Slp.r2rml4net.Storage.Query.QueryContext,Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Sql.Algebra.ISqlOriginalDbSource,System.String,TCode.r2rml4net.Mapping.ITermMap)">
            <summary>
            Processes the BGP variable.
            </summary>
            <param name="bgpOp">The BGP operator.</param>
            <param name="context">The query context.</param>
            <param name="select">The select.</param>
            <param name="source">The source.</param>
            <param name="variableName">Name of the variable.</param>
            <param name="r2rmlMap">The R2RML map.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.TransformToSelect(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Transforms to select.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <param name="context">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.ProcessJoin(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the join.
            </summary>
            <param name="first">The first join.</param>
            <param name="second">The second join.</param>
            <param name="context">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlAlgebraBuilder.ProcessJoin(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Processes the join.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable">
            <summary>
            SQL table
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable"/> class.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable.columns">
            <summary>
            The columns
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable.GetColumn(System.String)">
            <summary>
            Gets the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>ISqlColumn.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable.Accept(Slp.r2rml4net.Storage.Sql.Algebra.Operator.ISqlSourceVisitor,System.Object)">
            <summary>
            Accepts the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="data">The data.</param>
            <returns>The returned value from visitor.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable.RemoveColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Removes the column.
            </summary>
            <param name="col">The col.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable.TableName">
            <summary>
            Gets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Binders.Utils.ValueBinderExtensions">
            <summary>
            Extensions for value binders
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.Utils.ValueBinderExtensions.GetSelectValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder,Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Gets the value binder for SELECT operator.
            </summary>
            <param name="binder">The binder.</param>
            <param name="select">The select.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.Utils.ValueBinderExtensions.GetSelectColumn(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Gets the select column.
            </summary>
            <param name="select">The select.</param>
            <param name="column">The column.</param>
            <param name="context">The context.</param>
            <exception cref="T:System.Exception">
            Can't get select column from created column
            or
            Can't get select column
            </exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.Utils.ValueBinderExtensions.GetOriginalValueBinder(Slp.r2rml4net.Storage.Sql.Binders.IBaseValueBinder,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Gets the original value binder (value binder from original columns).
            </summary>
            <param name="binder">The value binder.</param>
            <param name="context">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Binders.Utils.ValueBinderExtensions.GetOriginalColumn(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Gets the original column.
            </summary>
            <param name="oldColumn">The old column.</param>
            <param name="context">The query context.</param>
            <exception cref="T:System.Exception">Can't get original column</exception>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader">
            <summary>
            Static data reader
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader.rows">
            <summary>
            The rows
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader.enumerator">
            <summary>
            The enumerator
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader.#ctor(Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderRow[])">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader"/> class.
            </summary>
            <param name="rows">The rows.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader.#ctor(System.Collections.Generic.IEnumerable{Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderRow})">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader"/> class.
            </summary>
            <param name="rows">The rows.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader.Read">
            <summary>
            Reads the current row and moves to next one.
            </summary>
            <returns>Readed row, <c>null</c> if there is no row</returns>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader"/> class.
            </summary>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReader.HasNextRow">
            <summary>
            Gets a value indicating whether this instance has next row.
            </summary>
            <value><c>true</c> if this instance has next row; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderRow">
            <summary>
            Static data reader row
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderRow.#ctor(Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderColumn[])">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderRow"/> class.
            </summary>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderRow.#ctor(System.Collections.Generic.IEnumerable{Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderColumn})">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderRow"/> class.
            </summary>
            <param name="columns">The columns.</param>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderRow.columns">
            <summary>
            The columns
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderRow.GetColumn(System.String)">
            <summary>
            Gets the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>IQueryResultColumn.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderRow.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderColumn">
            <summary>
            Static data reader column
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderColumn.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderColumn"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderColumn.GetBooleanValue">
            <summary>
            Gets the boolean value.
            </summary>
            <returns><c>true</c> if the value is true, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderColumn.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.SqlQuery.StaticDataReaderColumn.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlDb">
            <summary>
            Base database representation
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlDb.queryBuilder">
            <summary>
            The query builder
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlDb.nameGenerator">
            <summary>
            The name generator
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlDb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlDb"/> class.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlDb.ExecuteQuery(System.String,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Executes the query.
            </summary>
            <param name="query">The query.</param>
            <param name="context">The query context.</param>
            <returns>The query result reader.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlDb.GenerateQuery(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Generates the query.
            </summary>
            <param name="sqlAlgebra">The SQL algebra.</param>
            <param name="context">The query context.</param>
            <returns>The SQL query</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlDb.CanBeUnioned(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Determines whether the specified columns can be unioned.
            </summary>
            <param name="column">The column.</param>
            <param name="other">The other column.</param>
            <returns><c>true</c> if the specified columns can be unioned; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlNameGenerator">
            <summary>
            Name generator for SQL query
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlNameGenerator.GenerateNames(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Generates the names.
            </summary>
            <param name="source">The source.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlNameGenerator.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource,System.Object)">
            <summary>
            Visits the specified no row source.
            </summary>
            <param name="noRowSource">The no row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlNameGenerator.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource,System.Object)">
            <summary>
            Visits the specified single empty row source.
            </summary>
            <param name="singleEmptyRowSource">The single empty row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlNameGenerator.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,System.Object)">
            <summary>
            Visits the specified SQL select operator.
            </summary>
            <param name="sqlSelectOp">The SQL select operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlNameGenerator.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp,System.Object)">
            <summary>
            Visits the specified SQL union operator.
            </summary>
            <param name="sqlUnionOp">The SQL union operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlNameGenerator.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement,System.Object)">
            <summary>
            Visits the specified SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlNameGenerator.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable,System.Object)">
            <summary>
            Visits the specified SQL table.
            </summary>
            <param name="sqlTable">The SQL table.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlNameGenerator.GenerateColumnNames(System.Collections.Generic.IEnumerable{Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn},Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Generates the column names.
            </summary>
            <param name="columns">The columns.</param>
            <param name="queryContext">The query context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlNameGenerator.GenerateSourceName(Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Generates the name of the source.
            </summary>
            <param name="source">The source.</param>
            <param name="context">The context.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlNameGenerator.GetOriginalColumnName(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn)">
            <summary>
            Gets the name of the original column.
            </summary>
            <param name="col">The column.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder">
            <summary>
            SQL query builder
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.GenerateQuery(Slp.r2rml4net.Storage.Sql.Algebra.INotSqlOriginalDbSource,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Generates the query.
            </summary>
            <param name="sqlSource">The SQL source.</param>
            <param name="context">The context.</param>
            <returns>The SQL query.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.NoRowSource,System.Object)">
            <summary>
            Visits the specified no row source.
            </summary>
            <param name="noRowSource">The no row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SingleEmptyRowSource,System.Object)">
            <summary>
            Visits the specified single empty row source.
            </summary>
            <param name="singleEmptyRowSource">The single empty row source.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlSelectOp,System.Object)">
            <summary>
            Visits the specified SQL select operator.
            </summary>
            <param name="sqlSelectOp">The SQL select operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
            <exception cref="T:System.Exception">To enable limit and offset, it is needed to use also order by clause</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Operator.SqlUnionOp,System.Object)">
            <summary>
            Visits the specified SQL union operator.
            </summary>
            <param name="sqlUnionOp">The SQL union operator.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlStatement,System.Object)">
            <summary>
            Visits the specified SQL statement.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Source.SqlTable,System.Object)">
            <summary>
            Visits the specified SQL table.
            </summary>
            <param name="sqlTable">The SQL table.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.GenerateInnerQuery(Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource,Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.VisitorContext)">
            <summary>
            Generates the inner query.
            </summary>
            <param name="sqlSource">The SQL source.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.GenerateSelectColumnQuery(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.VisitorContext)">
            <summary>
            Generates the select column query.
            </summary>
            <param name="column">The column.</param>
            <param name="context">The context.</param>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.Exception">All names should be set</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.GenerateColumnQuery(Slp.r2rml4net.Storage.Sql.Algebra.ISqlColumn,Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.VisitorContext)">
            <summary>
            Generates the column query.
            </summary>
            <param name="col">The column.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.IsDelimiterNeeded(Slp.r2rml4net.Storage.Sql.Algebra.ISqlSource)">
            <summary>
            Determines whether the delimiter is needed for the specified SQL source.
            </summary>
            <param name="sqlSource">The SQL source.</param>
            <returns><c>true</c> if the delimiter is needed for the specified SQL source; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysFalseCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AlwaysTrueCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.EqualsCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.IsNullCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.NotCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.AndCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
            <exception cref="T:System.Exception">Cannot generate query for empty AND condition</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Condition.OrCondition,System.Object)">
            <summary>
            Visits the specified condition.
            </summary>
            <param name="condition">The condition.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
            <exception cref="T:System.Exception">Cannot generate query for empty OR condition</exception>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ColumnExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConstantExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.ConcatenationExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.NullExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="nullExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CoalesceExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="collateExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.Visit(Slp.r2rml4net.Storage.Sql.Algebra.Expression.CaseExpr,System.Object)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="caseExpr">The expression.</param>
            <param name="data">The passed data.</param>
            <returns>Returned value.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.VisitorContext">
            <summary>
            The context for visitor
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.VisitorContext.#ctor(System.Text.StringBuilder,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.VisitorContext"/> class.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.VisitorContext.SB">
            <summary>
            Gets the string builder.
            </summary>
            <value>The string builder.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Vendor.BaseSqlQueryBuilder.VisitorContext.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper">
            <summary>
            Wrapper for standard SQL reader
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.dataReader">
            <summary>
            The data reader
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.needsDisposeAction">
            <summary>
            The needs dispose action
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.disposeAction">
            <summary>
            The dispose action
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.currentRow">
            <summary>
            The current row
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.GetColumnNameUnquoted(System.String)">
            <summary>
            Gets the column name unquoted.
            </summary>
            <param name="columnName">The column name.</param>
            <returns>Unquoted column name.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.GetTableNameUnquoted(System.String)">
            <summary>
            Gets the table name unquoted.
            </summary>
            <param name="tableName">The table name.</param>
            <returns>Unquoted table name.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.#ctor(System.Data.SqlClient.SqlDataReader,System.Func{System.Boolean},System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper"/> class.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="needsDisposeAction">The needs dispose action.</param>
            <param name="disposeAction">The dispose action.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.FetchRow">
            <summary>
            Fetchs the row.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.Read">
            <summary>
            Reads the current row and moves to next one.
            </summary>
            <returns>Readed row, <c>null</c> if there is no row</returns>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.HasNextRow">
            <summary>
            Gets a value indicating whether this instance has next row.
            </summary>
            <value><c>true</c> if this instance has next row; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow">
            <summary>
            Wrapper for a readed row
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow.columns">
            <summary>
            The columns
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow.#ctor(System.Collections.Generic.List{Slp.r2rml4net.Storage.Sql.IQueryResultColumn})">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow"/> class.
            </summary>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow.Create(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Creates the specified data reader.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>IQueryResultRow.</returns>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow.StartDelimiters">
            <summary>
            The start delimiters
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow.EndDelimiters">
            <summary>
            The end delimiters
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow.ColumnNameRegex">
            <summary>
            The column name regex
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow.GetColumnNameUnquoted(System.String)">
            <summary>
            Gets the column name unquoted.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>Unquoted column name.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow.DelimitIdentifier(System.String)">
            <summary>
            Delimits the identifier.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns>Delimited identifier.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow.EnsureColumnNameUndelimited(System.String)">
            <summary>
            Ensures the column name undelimited.
            </summary>
            <param name="name">The name.</param>
            <returns>Undelimited column name.</returns>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow.GetColumn(System.String)">
            <summary>
            Gets the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>The column.</returns>
            <exception cref="T:System.Exception">Asked for column that is not present</exception>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderRow.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderColumn">
            <summary>
            Wrapper for a column
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderColumn.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderColumn.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderColumn.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderColumn"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderColumn.GetBooleanValue">
            <summary>
            Gets the boolean value.
            </summary>
            <returns><c>true</c> if the value is true, <c>false</c> otherwise.</returns>
            <exception cref="T:System.Exception">Cannot convert value to boolean</exception>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderColumn.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Slp.r2rml4net.Storage.Sql.Vendor.DataReaderWrapper.DataReaderColumn.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Sql.Vendor.MSSQLDb">
            <summary>
            MS SQL database vendor
            </summary>
        </member>
        <member name="F:Slp.r2rml4net.Storage.Sql.Vendor.MSSQLDb.connectionString">
            <summary>
            The connection string
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.MSSQLDb.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Slp.r2rml4net.Storage.Sql.Vendor.MSSQLDb"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Sql.Vendor.MSSQLDb.ExecuteQuery(System.String,Slp.r2rml4net.Storage.Query.QueryContext)">
            <summary>
            Executes the query.
            </summary>
            <param name="query">The query.</param>
            <param name="context">The query context.</param>
            <returns>The query result reader.</returns>
        </member>
        <member name="T:Slp.r2rml4net.Storage.Utils.UriExtensions">
            <summary>
            Extensions for Uri
            </summary>
        </member>
        <member name="M:Slp.r2rml4net.Storage.Utils.UriExtensions.UriEquals(System.Uri,System.Uri)">
            <summary>
            Are the URIs equal.
            </summary>
            <param name="first">The first URI.</param>
            <param name="second">The second URI.</param>
            <returns><c>true</c> if the URIs are equal, <c>false</c> otherwise.</returns>
        </member>
    </members>
</doc>
